// Copyright (C) 2018 The Android Open Source Project
// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated module goldfish_vk_baseprotoconversion
// (header) generated by ../protocols/vk-gen/xml/genvk.py -registry ../protocols/vk-gen/xml/vk.xml cereal -o ../stream-servers/vulkan/cereal
// Please do not modify directly;
// re-run generate-vulkan-sources.sh,
// or directly from Python by defining:
// VULKAN_REGISTRY_XML_DIR : Directory containing genvk.py and vk.xml
// CEREAL_OUTPUT_DIR: Where to put the generated sources.
// python3 $VULKAN_REGISTRY_XML_DIR/genvk.py -registry $VULKAN_REGISTRY_XML_DIR/vk.xml cereal -o $CEREAL_OUTPUT_DIR

#pragma once

#include <vulkan/vulkan.h>


#include "VulkanHandleMapping.h"

#include "base/Pool.h"
#include "goldfish_vk_private_defs.h"
#include "goldfish_vk_extension_structs.h"
#include "goldfish_vk_baseprotodefs.pb.h"

using android::base::Pool;


namespace goldfish_vk {

#ifdef VK_VERSION_1_0
void to_proto_VkApplicationInfo(
    VulkanHandleMapping* handleMapping,
    const VkApplicationInfo* input,
    goldfish_vk_proto::VkApplicationInfo* output);

void from_proto_VkApplicationInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkApplicationInfo* input,
    VkApplicationInfo* output);

void to_proto_VkInstanceCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkInstanceCreateInfo* input,
    goldfish_vk_proto::VkInstanceCreateInfo* output);

void from_proto_VkInstanceCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkInstanceCreateInfo* input,
    VkInstanceCreateInfo* output);

void to_proto_VkAllocationCallbacks(
    VulkanHandleMapping* handleMapping,
    const VkAllocationCallbacks* input,
    goldfish_vk_proto::VkAllocationCallbacks* output);

void from_proto_VkAllocationCallbacks(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkAllocationCallbacks* input,
    VkAllocationCallbacks* output);

void to_proto_VkPhysicalDeviceFeatures(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceFeatures* input,
    goldfish_vk_proto::VkPhysicalDeviceFeatures* output);

void from_proto_VkPhysicalDeviceFeatures(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceFeatures* input,
    VkPhysicalDeviceFeatures* output);

void to_proto_VkFormatProperties(
    VulkanHandleMapping* handleMapping,
    const VkFormatProperties* input,
    goldfish_vk_proto::VkFormatProperties* output);

void from_proto_VkFormatProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkFormatProperties* input,
    VkFormatProperties* output);

void to_proto_VkExtent3D(
    VulkanHandleMapping* handleMapping,
    const VkExtent3D* input,
    goldfish_vk_proto::VkExtent3D* output);

void from_proto_VkExtent3D(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExtent3D* input,
    VkExtent3D* output);

void to_proto_VkImageFormatProperties(
    VulkanHandleMapping* handleMapping,
    const VkImageFormatProperties* input,
    goldfish_vk_proto::VkImageFormatProperties* output);

void from_proto_VkImageFormatProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageFormatProperties* input,
    VkImageFormatProperties* output);

void to_proto_VkPhysicalDeviceLimits(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceLimits* input,
    goldfish_vk_proto::VkPhysicalDeviceLimits* output);

void from_proto_VkPhysicalDeviceLimits(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceLimits* input,
    VkPhysicalDeviceLimits* output);

void to_proto_VkPhysicalDeviceSparseProperties(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceSparseProperties* input,
    goldfish_vk_proto::VkPhysicalDeviceSparseProperties* output);

void from_proto_VkPhysicalDeviceSparseProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceSparseProperties* input,
    VkPhysicalDeviceSparseProperties* output);

void to_proto_VkPhysicalDeviceProperties(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceProperties* input,
    goldfish_vk_proto::VkPhysicalDeviceProperties* output);

void from_proto_VkPhysicalDeviceProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceProperties* input,
    VkPhysicalDeviceProperties* output);

void to_proto_VkQueueFamilyProperties(
    VulkanHandleMapping* handleMapping,
    const VkQueueFamilyProperties* input,
    goldfish_vk_proto::VkQueueFamilyProperties* output);

void from_proto_VkQueueFamilyProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkQueueFamilyProperties* input,
    VkQueueFamilyProperties* output);

void to_proto_VkMemoryType(
    VulkanHandleMapping* handleMapping,
    const VkMemoryType* input,
    goldfish_vk_proto::VkMemoryType* output);

void from_proto_VkMemoryType(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryType* input,
    VkMemoryType* output);

void to_proto_VkMemoryHeap(
    VulkanHandleMapping* handleMapping,
    const VkMemoryHeap* input,
    goldfish_vk_proto::VkMemoryHeap* output);

void from_proto_VkMemoryHeap(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryHeap* input,
    VkMemoryHeap* output);

void to_proto_VkPhysicalDeviceMemoryProperties(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceMemoryProperties* input,
    goldfish_vk_proto::VkPhysicalDeviceMemoryProperties* output);

void from_proto_VkPhysicalDeviceMemoryProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceMemoryProperties* input,
    VkPhysicalDeviceMemoryProperties* output);

void to_proto_VkDeviceQueueCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkDeviceQueueCreateInfo* input,
    goldfish_vk_proto::VkDeviceQueueCreateInfo* output);

void from_proto_VkDeviceQueueCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceQueueCreateInfo* input,
    VkDeviceQueueCreateInfo* output);

void to_proto_VkDeviceCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkDeviceCreateInfo* input,
    goldfish_vk_proto::VkDeviceCreateInfo* output);

void from_proto_VkDeviceCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceCreateInfo* input,
    VkDeviceCreateInfo* output);

void to_proto_VkExtensionProperties(
    VulkanHandleMapping* handleMapping,
    const VkExtensionProperties* input,
    goldfish_vk_proto::VkExtensionProperties* output);

void from_proto_VkExtensionProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExtensionProperties* input,
    VkExtensionProperties* output);

void to_proto_VkLayerProperties(
    VulkanHandleMapping* handleMapping,
    const VkLayerProperties* input,
    goldfish_vk_proto::VkLayerProperties* output);

void from_proto_VkLayerProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkLayerProperties* input,
    VkLayerProperties* output);

void to_proto_VkSubmitInfo(
    VulkanHandleMapping* handleMapping,
    const VkSubmitInfo* input,
    goldfish_vk_proto::VkSubmitInfo* output);

void from_proto_VkSubmitInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSubmitInfo* input,
    VkSubmitInfo* output);

void to_proto_VkMemoryAllocateInfo(
    VulkanHandleMapping* handleMapping,
    const VkMemoryAllocateInfo* input,
    goldfish_vk_proto::VkMemoryAllocateInfo* output);

void from_proto_VkMemoryAllocateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryAllocateInfo* input,
    VkMemoryAllocateInfo* output);

void to_proto_VkMappedMemoryRange(
    VulkanHandleMapping* handleMapping,
    const VkMappedMemoryRange* input,
    goldfish_vk_proto::VkMappedMemoryRange* output);

void from_proto_VkMappedMemoryRange(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMappedMemoryRange* input,
    VkMappedMemoryRange* output);

void to_proto_VkMemoryRequirements(
    VulkanHandleMapping* handleMapping,
    const VkMemoryRequirements* input,
    goldfish_vk_proto::VkMemoryRequirements* output);

void from_proto_VkMemoryRequirements(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryRequirements* input,
    VkMemoryRequirements* output);

void to_proto_VkSparseImageFormatProperties(
    VulkanHandleMapping* handleMapping,
    const VkSparseImageFormatProperties* input,
    goldfish_vk_proto::VkSparseImageFormatProperties* output);

void from_proto_VkSparseImageFormatProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSparseImageFormatProperties* input,
    VkSparseImageFormatProperties* output);

void to_proto_VkSparseImageMemoryRequirements(
    VulkanHandleMapping* handleMapping,
    const VkSparseImageMemoryRequirements* input,
    goldfish_vk_proto::VkSparseImageMemoryRequirements* output);

void from_proto_VkSparseImageMemoryRequirements(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSparseImageMemoryRequirements* input,
    VkSparseImageMemoryRequirements* output);

void to_proto_VkSparseMemoryBind(
    VulkanHandleMapping* handleMapping,
    const VkSparseMemoryBind* input,
    goldfish_vk_proto::VkSparseMemoryBind* output);

void from_proto_VkSparseMemoryBind(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSparseMemoryBind* input,
    VkSparseMemoryBind* output);

void to_proto_VkSparseBufferMemoryBindInfo(
    VulkanHandleMapping* handleMapping,
    const VkSparseBufferMemoryBindInfo* input,
    goldfish_vk_proto::VkSparseBufferMemoryBindInfo* output);

void from_proto_VkSparseBufferMemoryBindInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSparseBufferMemoryBindInfo* input,
    VkSparseBufferMemoryBindInfo* output);

void to_proto_VkSparseImageOpaqueMemoryBindInfo(
    VulkanHandleMapping* handleMapping,
    const VkSparseImageOpaqueMemoryBindInfo* input,
    goldfish_vk_proto::VkSparseImageOpaqueMemoryBindInfo* output);

void from_proto_VkSparseImageOpaqueMemoryBindInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSparseImageOpaqueMemoryBindInfo* input,
    VkSparseImageOpaqueMemoryBindInfo* output);

void to_proto_VkImageSubresource(
    VulkanHandleMapping* handleMapping,
    const VkImageSubresource* input,
    goldfish_vk_proto::VkImageSubresource* output);

void from_proto_VkImageSubresource(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageSubresource* input,
    VkImageSubresource* output);

void to_proto_VkOffset3D(
    VulkanHandleMapping* handleMapping,
    const VkOffset3D* input,
    goldfish_vk_proto::VkOffset3D* output);

void from_proto_VkOffset3D(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkOffset3D* input,
    VkOffset3D* output);

void to_proto_VkSparseImageMemoryBind(
    VulkanHandleMapping* handleMapping,
    const VkSparseImageMemoryBind* input,
    goldfish_vk_proto::VkSparseImageMemoryBind* output);

void from_proto_VkSparseImageMemoryBind(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSparseImageMemoryBind* input,
    VkSparseImageMemoryBind* output);

void to_proto_VkSparseImageMemoryBindInfo(
    VulkanHandleMapping* handleMapping,
    const VkSparseImageMemoryBindInfo* input,
    goldfish_vk_proto::VkSparseImageMemoryBindInfo* output);

void from_proto_VkSparseImageMemoryBindInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSparseImageMemoryBindInfo* input,
    VkSparseImageMemoryBindInfo* output);

void to_proto_VkBindSparseInfo(
    VulkanHandleMapping* handleMapping,
    const VkBindSparseInfo* input,
    goldfish_vk_proto::VkBindSparseInfo* output);

void from_proto_VkBindSparseInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBindSparseInfo* input,
    VkBindSparseInfo* output);

void to_proto_VkFenceCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkFenceCreateInfo* input,
    goldfish_vk_proto::VkFenceCreateInfo* output);

void from_proto_VkFenceCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkFenceCreateInfo* input,
    VkFenceCreateInfo* output);

void to_proto_VkSemaphoreCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkSemaphoreCreateInfo* input,
    goldfish_vk_proto::VkSemaphoreCreateInfo* output);

void from_proto_VkSemaphoreCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSemaphoreCreateInfo* input,
    VkSemaphoreCreateInfo* output);

void to_proto_VkEventCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkEventCreateInfo* input,
    goldfish_vk_proto::VkEventCreateInfo* output);

void from_proto_VkEventCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkEventCreateInfo* input,
    VkEventCreateInfo* output);

void to_proto_VkQueryPoolCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkQueryPoolCreateInfo* input,
    goldfish_vk_proto::VkQueryPoolCreateInfo* output);

void from_proto_VkQueryPoolCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkQueryPoolCreateInfo* input,
    VkQueryPoolCreateInfo* output);

void to_proto_VkBufferCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkBufferCreateInfo* input,
    goldfish_vk_proto::VkBufferCreateInfo* output);

void from_proto_VkBufferCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBufferCreateInfo* input,
    VkBufferCreateInfo* output);

void to_proto_VkBufferViewCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkBufferViewCreateInfo* input,
    goldfish_vk_proto::VkBufferViewCreateInfo* output);

void from_proto_VkBufferViewCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBufferViewCreateInfo* input,
    VkBufferViewCreateInfo* output);

void to_proto_VkImageCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkImageCreateInfo* input,
    goldfish_vk_proto::VkImageCreateInfo* output);

void from_proto_VkImageCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageCreateInfo* input,
    VkImageCreateInfo* output);

void to_proto_VkSubresourceLayout(
    VulkanHandleMapping* handleMapping,
    const VkSubresourceLayout* input,
    goldfish_vk_proto::VkSubresourceLayout* output);

void from_proto_VkSubresourceLayout(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSubresourceLayout* input,
    VkSubresourceLayout* output);

void to_proto_VkComponentMapping(
    VulkanHandleMapping* handleMapping,
    const VkComponentMapping* input,
    goldfish_vk_proto::VkComponentMapping* output);

void from_proto_VkComponentMapping(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkComponentMapping* input,
    VkComponentMapping* output);

void to_proto_VkImageSubresourceRange(
    VulkanHandleMapping* handleMapping,
    const VkImageSubresourceRange* input,
    goldfish_vk_proto::VkImageSubresourceRange* output);

void from_proto_VkImageSubresourceRange(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageSubresourceRange* input,
    VkImageSubresourceRange* output);

void to_proto_VkImageViewCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkImageViewCreateInfo* input,
    goldfish_vk_proto::VkImageViewCreateInfo* output);

void from_proto_VkImageViewCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageViewCreateInfo* input,
    VkImageViewCreateInfo* output);

void to_proto_VkShaderModuleCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkShaderModuleCreateInfo* input,
    goldfish_vk_proto::VkShaderModuleCreateInfo* output);

void from_proto_VkShaderModuleCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkShaderModuleCreateInfo* input,
    VkShaderModuleCreateInfo* output);

void to_proto_VkPipelineCacheCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineCacheCreateInfo* input,
    goldfish_vk_proto::VkPipelineCacheCreateInfo* output);

void from_proto_VkPipelineCacheCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineCacheCreateInfo* input,
    VkPipelineCacheCreateInfo* output);

void to_proto_VkSpecializationMapEntry(
    VulkanHandleMapping* handleMapping,
    const VkSpecializationMapEntry* input,
    goldfish_vk_proto::VkSpecializationMapEntry* output);

void from_proto_VkSpecializationMapEntry(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSpecializationMapEntry* input,
    VkSpecializationMapEntry* output);

void to_proto_VkSpecializationInfo(
    VulkanHandleMapping* handleMapping,
    const VkSpecializationInfo* input,
    goldfish_vk_proto::VkSpecializationInfo* output);

void from_proto_VkSpecializationInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSpecializationInfo* input,
    VkSpecializationInfo* output);

void to_proto_VkPipelineShaderStageCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineShaderStageCreateInfo* input,
    goldfish_vk_proto::VkPipelineShaderStageCreateInfo* output);

void from_proto_VkPipelineShaderStageCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineShaderStageCreateInfo* input,
    VkPipelineShaderStageCreateInfo* output);

void to_proto_VkVertexInputBindingDescription(
    VulkanHandleMapping* handleMapping,
    const VkVertexInputBindingDescription* input,
    goldfish_vk_proto::VkVertexInputBindingDescription* output);

void from_proto_VkVertexInputBindingDescription(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkVertexInputBindingDescription* input,
    VkVertexInputBindingDescription* output);

void to_proto_VkVertexInputAttributeDescription(
    VulkanHandleMapping* handleMapping,
    const VkVertexInputAttributeDescription* input,
    goldfish_vk_proto::VkVertexInputAttributeDescription* output);

void from_proto_VkVertexInputAttributeDescription(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkVertexInputAttributeDescription* input,
    VkVertexInputAttributeDescription* output);

void to_proto_VkPipelineVertexInputStateCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineVertexInputStateCreateInfo* input,
    goldfish_vk_proto::VkPipelineVertexInputStateCreateInfo* output);

void from_proto_VkPipelineVertexInputStateCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineVertexInputStateCreateInfo* input,
    VkPipelineVertexInputStateCreateInfo* output);

void to_proto_VkPipelineInputAssemblyStateCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineInputAssemblyStateCreateInfo* input,
    goldfish_vk_proto::VkPipelineInputAssemblyStateCreateInfo* output);

void from_proto_VkPipelineInputAssemblyStateCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineInputAssemblyStateCreateInfo* input,
    VkPipelineInputAssemblyStateCreateInfo* output);

void to_proto_VkPipelineTessellationStateCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineTessellationStateCreateInfo* input,
    goldfish_vk_proto::VkPipelineTessellationStateCreateInfo* output);

void from_proto_VkPipelineTessellationStateCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineTessellationStateCreateInfo* input,
    VkPipelineTessellationStateCreateInfo* output);

void to_proto_VkViewport(
    VulkanHandleMapping* handleMapping,
    const VkViewport* input,
    goldfish_vk_proto::VkViewport* output);

void from_proto_VkViewport(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkViewport* input,
    VkViewport* output);

void to_proto_VkOffset2D(
    VulkanHandleMapping* handleMapping,
    const VkOffset2D* input,
    goldfish_vk_proto::VkOffset2D* output);

void from_proto_VkOffset2D(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkOffset2D* input,
    VkOffset2D* output);

void to_proto_VkExtent2D(
    VulkanHandleMapping* handleMapping,
    const VkExtent2D* input,
    goldfish_vk_proto::VkExtent2D* output);

void from_proto_VkExtent2D(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExtent2D* input,
    VkExtent2D* output);

void to_proto_VkRect2D(
    VulkanHandleMapping* handleMapping,
    const VkRect2D* input,
    goldfish_vk_proto::VkRect2D* output);

void from_proto_VkRect2D(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkRect2D* input,
    VkRect2D* output);

void to_proto_VkPipelineViewportStateCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineViewportStateCreateInfo* input,
    goldfish_vk_proto::VkPipelineViewportStateCreateInfo* output);

void from_proto_VkPipelineViewportStateCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineViewportStateCreateInfo* input,
    VkPipelineViewportStateCreateInfo* output);

void to_proto_VkPipelineRasterizationStateCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineRasterizationStateCreateInfo* input,
    goldfish_vk_proto::VkPipelineRasterizationStateCreateInfo* output);

void from_proto_VkPipelineRasterizationStateCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineRasterizationStateCreateInfo* input,
    VkPipelineRasterizationStateCreateInfo* output);

void to_proto_VkPipelineMultisampleStateCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineMultisampleStateCreateInfo* input,
    goldfish_vk_proto::VkPipelineMultisampleStateCreateInfo* output);

void from_proto_VkPipelineMultisampleStateCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineMultisampleStateCreateInfo* input,
    VkPipelineMultisampleStateCreateInfo* output);

void to_proto_VkStencilOpState(
    VulkanHandleMapping* handleMapping,
    const VkStencilOpState* input,
    goldfish_vk_proto::VkStencilOpState* output);

void from_proto_VkStencilOpState(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkStencilOpState* input,
    VkStencilOpState* output);

void to_proto_VkPipelineDepthStencilStateCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineDepthStencilStateCreateInfo* input,
    goldfish_vk_proto::VkPipelineDepthStencilStateCreateInfo* output);

void from_proto_VkPipelineDepthStencilStateCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineDepthStencilStateCreateInfo* input,
    VkPipelineDepthStencilStateCreateInfo* output);

void to_proto_VkPipelineColorBlendAttachmentState(
    VulkanHandleMapping* handleMapping,
    const VkPipelineColorBlendAttachmentState* input,
    goldfish_vk_proto::VkPipelineColorBlendAttachmentState* output);

void from_proto_VkPipelineColorBlendAttachmentState(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineColorBlendAttachmentState* input,
    VkPipelineColorBlendAttachmentState* output);

void to_proto_VkPipelineColorBlendStateCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineColorBlendStateCreateInfo* input,
    goldfish_vk_proto::VkPipelineColorBlendStateCreateInfo* output);

void from_proto_VkPipelineColorBlendStateCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineColorBlendStateCreateInfo* input,
    VkPipelineColorBlendStateCreateInfo* output);

void to_proto_VkPipelineDynamicStateCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineDynamicStateCreateInfo* input,
    goldfish_vk_proto::VkPipelineDynamicStateCreateInfo* output);

void from_proto_VkPipelineDynamicStateCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineDynamicStateCreateInfo* input,
    VkPipelineDynamicStateCreateInfo* output);

void to_proto_VkGraphicsPipelineCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkGraphicsPipelineCreateInfo* input,
    goldfish_vk_proto::VkGraphicsPipelineCreateInfo* output);

void from_proto_VkGraphicsPipelineCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkGraphicsPipelineCreateInfo* input,
    VkGraphicsPipelineCreateInfo* output);

void to_proto_VkComputePipelineCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkComputePipelineCreateInfo* input,
    goldfish_vk_proto::VkComputePipelineCreateInfo* output);

void from_proto_VkComputePipelineCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkComputePipelineCreateInfo* input,
    VkComputePipelineCreateInfo* output);

void to_proto_VkPushConstantRange(
    VulkanHandleMapping* handleMapping,
    const VkPushConstantRange* input,
    goldfish_vk_proto::VkPushConstantRange* output);

void from_proto_VkPushConstantRange(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPushConstantRange* input,
    VkPushConstantRange* output);

void to_proto_VkPipelineLayoutCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineLayoutCreateInfo* input,
    goldfish_vk_proto::VkPipelineLayoutCreateInfo* output);

void from_proto_VkPipelineLayoutCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineLayoutCreateInfo* input,
    VkPipelineLayoutCreateInfo* output);

void to_proto_VkSamplerCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkSamplerCreateInfo* input,
    goldfish_vk_proto::VkSamplerCreateInfo* output);

void from_proto_VkSamplerCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSamplerCreateInfo* input,
    VkSamplerCreateInfo* output);

void to_proto_VkDescriptorSetLayoutBinding(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorSetLayoutBinding* input,
    goldfish_vk_proto::VkDescriptorSetLayoutBinding* output);

void from_proto_VkDescriptorSetLayoutBinding(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorSetLayoutBinding* input,
    VkDescriptorSetLayoutBinding* output);

void to_proto_VkDescriptorSetLayoutCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorSetLayoutCreateInfo* input,
    goldfish_vk_proto::VkDescriptorSetLayoutCreateInfo* output);

void from_proto_VkDescriptorSetLayoutCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorSetLayoutCreateInfo* input,
    VkDescriptorSetLayoutCreateInfo* output);

void to_proto_VkDescriptorPoolSize(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorPoolSize* input,
    goldfish_vk_proto::VkDescriptorPoolSize* output);

void from_proto_VkDescriptorPoolSize(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorPoolSize* input,
    VkDescriptorPoolSize* output);

void to_proto_VkDescriptorPoolCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorPoolCreateInfo* input,
    goldfish_vk_proto::VkDescriptorPoolCreateInfo* output);

void from_proto_VkDescriptorPoolCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorPoolCreateInfo* input,
    VkDescriptorPoolCreateInfo* output);

void to_proto_VkDescriptorSetAllocateInfo(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorSetAllocateInfo* input,
    goldfish_vk_proto::VkDescriptorSetAllocateInfo* output);

void from_proto_VkDescriptorSetAllocateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorSetAllocateInfo* input,
    VkDescriptorSetAllocateInfo* output);

void to_proto_VkDescriptorImageInfo(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorImageInfo* input,
    goldfish_vk_proto::VkDescriptorImageInfo* output);

void from_proto_VkDescriptorImageInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorImageInfo* input,
    VkDescriptorImageInfo* output);

void to_proto_VkDescriptorBufferInfo(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorBufferInfo* input,
    goldfish_vk_proto::VkDescriptorBufferInfo* output);

void from_proto_VkDescriptorBufferInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorBufferInfo* input,
    VkDescriptorBufferInfo* output);

void to_proto_VkWriteDescriptorSet(
    VulkanHandleMapping* handleMapping,
    const VkWriteDescriptorSet* input,
    goldfish_vk_proto::VkWriteDescriptorSet* output);

void from_proto_VkWriteDescriptorSet(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkWriteDescriptorSet* input,
    VkWriteDescriptorSet* output);

void to_proto_VkCopyDescriptorSet(
    VulkanHandleMapping* handleMapping,
    const VkCopyDescriptorSet* input,
    goldfish_vk_proto::VkCopyDescriptorSet* output);

void from_proto_VkCopyDescriptorSet(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkCopyDescriptorSet* input,
    VkCopyDescriptorSet* output);

void to_proto_VkFramebufferCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkFramebufferCreateInfo* input,
    goldfish_vk_proto::VkFramebufferCreateInfo* output);

void from_proto_VkFramebufferCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkFramebufferCreateInfo* input,
    VkFramebufferCreateInfo* output);

void to_proto_VkAttachmentDescription(
    VulkanHandleMapping* handleMapping,
    const VkAttachmentDescription* input,
    goldfish_vk_proto::VkAttachmentDescription* output);

void from_proto_VkAttachmentDescription(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkAttachmentDescription* input,
    VkAttachmentDescription* output);

void to_proto_VkAttachmentReference(
    VulkanHandleMapping* handleMapping,
    const VkAttachmentReference* input,
    goldfish_vk_proto::VkAttachmentReference* output);

void from_proto_VkAttachmentReference(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkAttachmentReference* input,
    VkAttachmentReference* output);

void to_proto_VkSubpassDescription(
    VulkanHandleMapping* handleMapping,
    const VkSubpassDescription* input,
    goldfish_vk_proto::VkSubpassDescription* output);

void from_proto_VkSubpassDescription(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSubpassDescription* input,
    VkSubpassDescription* output);

void to_proto_VkSubpassDependency(
    VulkanHandleMapping* handleMapping,
    const VkSubpassDependency* input,
    goldfish_vk_proto::VkSubpassDependency* output);

void from_proto_VkSubpassDependency(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSubpassDependency* input,
    VkSubpassDependency* output);

void to_proto_VkRenderPassCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkRenderPassCreateInfo* input,
    goldfish_vk_proto::VkRenderPassCreateInfo* output);

void from_proto_VkRenderPassCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkRenderPassCreateInfo* input,
    VkRenderPassCreateInfo* output);

void to_proto_VkCommandPoolCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkCommandPoolCreateInfo* input,
    goldfish_vk_proto::VkCommandPoolCreateInfo* output);

void from_proto_VkCommandPoolCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkCommandPoolCreateInfo* input,
    VkCommandPoolCreateInfo* output);

void to_proto_VkCommandBufferAllocateInfo(
    VulkanHandleMapping* handleMapping,
    const VkCommandBufferAllocateInfo* input,
    goldfish_vk_proto::VkCommandBufferAllocateInfo* output);

void from_proto_VkCommandBufferAllocateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkCommandBufferAllocateInfo* input,
    VkCommandBufferAllocateInfo* output);

void to_proto_VkCommandBufferInheritanceInfo(
    VulkanHandleMapping* handleMapping,
    const VkCommandBufferInheritanceInfo* input,
    goldfish_vk_proto::VkCommandBufferInheritanceInfo* output);

void from_proto_VkCommandBufferInheritanceInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkCommandBufferInheritanceInfo* input,
    VkCommandBufferInheritanceInfo* output);

void to_proto_VkCommandBufferBeginInfo(
    VulkanHandleMapping* handleMapping,
    const VkCommandBufferBeginInfo* input,
    goldfish_vk_proto::VkCommandBufferBeginInfo* output);

void from_proto_VkCommandBufferBeginInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkCommandBufferBeginInfo* input,
    VkCommandBufferBeginInfo* output);

void to_proto_VkBufferCopy(
    VulkanHandleMapping* handleMapping,
    const VkBufferCopy* input,
    goldfish_vk_proto::VkBufferCopy* output);

void from_proto_VkBufferCopy(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBufferCopy* input,
    VkBufferCopy* output);

void to_proto_VkImageSubresourceLayers(
    VulkanHandleMapping* handleMapping,
    const VkImageSubresourceLayers* input,
    goldfish_vk_proto::VkImageSubresourceLayers* output);

void from_proto_VkImageSubresourceLayers(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageSubresourceLayers* input,
    VkImageSubresourceLayers* output);

void to_proto_VkImageCopy(
    VulkanHandleMapping* handleMapping,
    const VkImageCopy* input,
    goldfish_vk_proto::VkImageCopy* output);

void from_proto_VkImageCopy(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageCopy* input,
    VkImageCopy* output);

void to_proto_VkImageBlit(
    VulkanHandleMapping* handleMapping,
    const VkImageBlit* input,
    goldfish_vk_proto::VkImageBlit* output);

void from_proto_VkImageBlit(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageBlit* input,
    VkImageBlit* output);

void to_proto_VkBufferImageCopy(
    VulkanHandleMapping* handleMapping,
    const VkBufferImageCopy* input,
    goldfish_vk_proto::VkBufferImageCopy* output);

void from_proto_VkBufferImageCopy(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBufferImageCopy* input,
    VkBufferImageCopy* output);

void to_proto_VkClearColorValue(
    VulkanHandleMapping* handleMapping,
    const VkClearColorValue* input,
    goldfish_vk_proto::VkClearColorValue* output);

void from_proto_VkClearColorValue(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkClearColorValue* input,
    VkClearColorValue* output);

void to_proto_VkClearDepthStencilValue(
    VulkanHandleMapping* handleMapping,
    const VkClearDepthStencilValue* input,
    goldfish_vk_proto::VkClearDepthStencilValue* output);

void from_proto_VkClearDepthStencilValue(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkClearDepthStencilValue* input,
    VkClearDepthStencilValue* output);

void to_proto_VkClearValue(
    VulkanHandleMapping* handleMapping,
    const VkClearValue* input,
    goldfish_vk_proto::VkClearValue* output);

void from_proto_VkClearValue(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkClearValue* input,
    VkClearValue* output);

void to_proto_VkClearAttachment(
    VulkanHandleMapping* handleMapping,
    const VkClearAttachment* input,
    goldfish_vk_proto::VkClearAttachment* output);

void from_proto_VkClearAttachment(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkClearAttachment* input,
    VkClearAttachment* output);

void to_proto_VkClearRect(
    VulkanHandleMapping* handleMapping,
    const VkClearRect* input,
    goldfish_vk_proto::VkClearRect* output);

void from_proto_VkClearRect(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkClearRect* input,
    VkClearRect* output);

void to_proto_VkImageResolve(
    VulkanHandleMapping* handleMapping,
    const VkImageResolve* input,
    goldfish_vk_proto::VkImageResolve* output);

void from_proto_VkImageResolve(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageResolve* input,
    VkImageResolve* output);

void to_proto_VkMemoryBarrier(
    VulkanHandleMapping* handleMapping,
    const VkMemoryBarrier* input,
    goldfish_vk_proto::VkMemoryBarrier* output);

void from_proto_VkMemoryBarrier(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryBarrier* input,
    VkMemoryBarrier* output);

void to_proto_VkBufferMemoryBarrier(
    VulkanHandleMapping* handleMapping,
    const VkBufferMemoryBarrier* input,
    goldfish_vk_proto::VkBufferMemoryBarrier* output);

void from_proto_VkBufferMemoryBarrier(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBufferMemoryBarrier* input,
    VkBufferMemoryBarrier* output);

void to_proto_VkImageMemoryBarrier(
    VulkanHandleMapping* handleMapping,
    const VkImageMemoryBarrier* input,
    goldfish_vk_proto::VkImageMemoryBarrier* output);

void from_proto_VkImageMemoryBarrier(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageMemoryBarrier* input,
    VkImageMemoryBarrier* output);

void to_proto_VkRenderPassBeginInfo(
    VulkanHandleMapping* handleMapping,
    const VkRenderPassBeginInfo* input,
    goldfish_vk_proto::VkRenderPassBeginInfo* output);

void from_proto_VkRenderPassBeginInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkRenderPassBeginInfo* input,
    VkRenderPassBeginInfo* output);

void to_proto_VkDispatchIndirectCommand(
    VulkanHandleMapping* handleMapping,
    const VkDispatchIndirectCommand* input,
    goldfish_vk_proto::VkDispatchIndirectCommand* output);

void from_proto_VkDispatchIndirectCommand(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDispatchIndirectCommand* input,
    VkDispatchIndirectCommand* output);

void to_proto_VkDrawIndexedIndirectCommand(
    VulkanHandleMapping* handleMapping,
    const VkDrawIndexedIndirectCommand* input,
    goldfish_vk_proto::VkDrawIndexedIndirectCommand* output);

void from_proto_VkDrawIndexedIndirectCommand(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDrawIndexedIndirectCommand* input,
    VkDrawIndexedIndirectCommand* output);

void to_proto_VkDrawIndirectCommand(
    VulkanHandleMapping* handleMapping,
    const VkDrawIndirectCommand* input,
    goldfish_vk_proto::VkDrawIndirectCommand* output);

void from_proto_VkDrawIndirectCommand(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDrawIndirectCommand* input,
    VkDrawIndirectCommand* output);

void to_proto_VkBaseOutStructure(
    VulkanHandleMapping* handleMapping,
    const VkBaseOutStructure* input,
    goldfish_vk_proto::VkBaseOutStructure* output);

void from_proto_VkBaseOutStructure(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBaseOutStructure* input,
    VkBaseOutStructure* output);

void to_proto_VkBaseInStructure(
    VulkanHandleMapping* handleMapping,
    const VkBaseInStructure* input,
    goldfish_vk_proto::VkBaseInStructure* output);

void from_proto_VkBaseInStructure(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBaseInStructure* input,
    VkBaseInStructure* output);

#endif
#ifdef VK_VERSION_1_1
void to_proto_VkPhysicalDeviceSubgroupProperties(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceSubgroupProperties* input,
    goldfish_vk_proto::VkPhysicalDeviceSubgroupProperties* output);

void from_proto_VkPhysicalDeviceSubgroupProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceSubgroupProperties* input,
    VkPhysicalDeviceSubgroupProperties* output);

void to_proto_VkBindBufferMemoryInfo(
    VulkanHandleMapping* handleMapping,
    const VkBindBufferMemoryInfo* input,
    goldfish_vk_proto::VkBindBufferMemoryInfo* output);

void from_proto_VkBindBufferMemoryInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBindBufferMemoryInfo* input,
    VkBindBufferMemoryInfo* output);

void to_proto_VkBindImageMemoryInfo(
    VulkanHandleMapping* handleMapping,
    const VkBindImageMemoryInfo* input,
    goldfish_vk_proto::VkBindImageMemoryInfo* output);

void from_proto_VkBindImageMemoryInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBindImageMemoryInfo* input,
    VkBindImageMemoryInfo* output);

void to_proto_VkPhysicalDevice16BitStorageFeatures(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDevice16BitStorageFeatures* input,
    goldfish_vk_proto::VkPhysicalDevice16BitStorageFeatures* output);

void from_proto_VkPhysicalDevice16BitStorageFeatures(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDevice16BitStorageFeatures* input,
    VkPhysicalDevice16BitStorageFeatures* output);

void to_proto_VkMemoryDedicatedRequirements(
    VulkanHandleMapping* handleMapping,
    const VkMemoryDedicatedRequirements* input,
    goldfish_vk_proto::VkMemoryDedicatedRequirements* output);

void from_proto_VkMemoryDedicatedRequirements(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryDedicatedRequirements* input,
    VkMemoryDedicatedRequirements* output);

void to_proto_VkMemoryDedicatedAllocateInfo(
    VulkanHandleMapping* handleMapping,
    const VkMemoryDedicatedAllocateInfo* input,
    goldfish_vk_proto::VkMemoryDedicatedAllocateInfo* output);

void from_proto_VkMemoryDedicatedAllocateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryDedicatedAllocateInfo* input,
    VkMemoryDedicatedAllocateInfo* output);

void to_proto_VkMemoryAllocateFlagsInfo(
    VulkanHandleMapping* handleMapping,
    const VkMemoryAllocateFlagsInfo* input,
    goldfish_vk_proto::VkMemoryAllocateFlagsInfo* output);

void from_proto_VkMemoryAllocateFlagsInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryAllocateFlagsInfo* input,
    VkMemoryAllocateFlagsInfo* output);

void to_proto_VkDeviceGroupRenderPassBeginInfo(
    VulkanHandleMapping* handleMapping,
    const VkDeviceGroupRenderPassBeginInfo* input,
    goldfish_vk_proto::VkDeviceGroupRenderPassBeginInfo* output);

void from_proto_VkDeviceGroupRenderPassBeginInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceGroupRenderPassBeginInfo* input,
    VkDeviceGroupRenderPassBeginInfo* output);

void to_proto_VkDeviceGroupCommandBufferBeginInfo(
    VulkanHandleMapping* handleMapping,
    const VkDeviceGroupCommandBufferBeginInfo* input,
    goldfish_vk_proto::VkDeviceGroupCommandBufferBeginInfo* output);

void from_proto_VkDeviceGroupCommandBufferBeginInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceGroupCommandBufferBeginInfo* input,
    VkDeviceGroupCommandBufferBeginInfo* output);

void to_proto_VkDeviceGroupSubmitInfo(
    VulkanHandleMapping* handleMapping,
    const VkDeviceGroupSubmitInfo* input,
    goldfish_vk_proto::VkDeviceGroupSubmitInfo* output);

void from_proto_VkDeviceGroupSubmitInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceGroupSubmitInfo* input,
    VkDeviceGroupSubmitInfo* output);

void to_proto_VkDeviceGroupBindSparseInfo(
    VulkanHandleMapping* handleMapping,
    const VkDeviceGroupBindSparseInfo* input,
    goldfish_vk_proto::VkDeviceGroupBindSparseInfo* output);

void from_proto_VkDeviceGroupBindSparseInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceGroupBindSparseInfo* input,
    VkDeviceGroupBindSparseInfo* output);

void to_proto_VkBindBufferMemoryDeviceGroupInfo(
    VulkanHandleMapping* handleMapping,
    const VkBindBufferMemoryDeviceGroupInfo* input,
    goldfish_vk_proto::VkBindBufferMemoryDeviceGroupInfo* output);

void from_proto_VkBindBufferMemoryDeviceGroupInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBindBufferMemoryDeviceGroupInfo* input,
    VkBindBufferMemoryDeviceGroupInfo* output);

void to_proto_VkBindImageMemoryDeviceGroupInfo(
    VulkanHandleMapping* handleMapping,
    const VkBindImageMemoryDeviceGroupInfo* input,
    goldfish_vk_proto::VkBindImageMemoryDeviceGroupInfo* output);

void from_proto_VkBindImageMemoryDeviceGroupInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBindImageMemoryDeviceGroupInfo* input,
    VkBindImageMemoryDeviceGroupInfo* output);

void to_proto_VkPhysicalDeviceGroupProperties(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceGroupProperties* input,
    goldfish_vk_proto::VkPhysicalDeviceGroupProperties* output);

void from_proto_VkPhysicalDeviceGroupProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceGroupProperties* input,
    VkPhysicalDeviceGroupProperties* output);

void to_proto_VkDeviceGroupDeviceCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkDeviceGroupDeviceCreateInfo* input,
    goldfish_vk_proto::VkDeviceGroupDeviceCreateInfo* output);

void from_proto_VkDeviceGroupDeviceCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceGroupDeviceCreateInfo* input,
    VkDeviceGroupDeviceCreateInfo* output);

void to_proto_VkBufferMemoryRequirementsInfo2(
    VulkanHandleMapping* handleMapping,
    const VkBufferMemoryRequirementsInfo2* input,
    goldfish_vk_proto::VkBufferMemoryRequirementsInfo2* output);

void from_proto_VkBufferMemoryRequirementsInfo2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBufferMemoryRequirementsInfo2* input,
    VkBufferMemoryRequirementsInfo2* output);

void to_proto_VkImageMemoryRequirementsInfo2(
    VulkanHandleMapping* handleMapping,
    const VkImageMemoryRequirementsInfo2* input,
    goldfish_vk_proto::VkImageMemoryRequirementsInfo2* output);

void from_proto_VkImageMemoryRequirementsInfo2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageMemoryRequirementsInfo2* input,
    VkImageMemoryRequirementsInfo2* output);

void to_proto_VkImageSparseMemoryRequirementsInfo2(
    VulkanHandleMapping* handleMapping,
    const VkImageSparseMemoryRequirementsInfo2* input,
    goldfish_vk_proto::VkImageSparseMemoryRequirementsInfo2* output);

void from_proto_VkImageSparseMemoryRequirementsInfo2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageSparseMemoryRequirementsInfo2* input,
    VkImageSparseMemoryRequirementsInfo2* output);

void to_proto_VkMemoryRequirements2(
    VulkanHandleMapping* handleMapping,
    const VkMemoryRequirements2* input,
    goldfish_vk_proto::VkMemoryRequirements2* output);

void from_proto_VkMemoryRequirements2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryRequirements2* input,
    VkMemoryRequirements2* output);

void to_proto_VkSparseImageMemoryRequirements2(
    VulkanHandleMapping* handleMapping,
    const VkSparseImageMemoryRequirements2* input,
    goldfish_vk_proto::VkSparseImageMemoryRequirements2* output);

void from_proto_VkSparseImageMemoryRequirements2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSparseImageMemoryRequirements2* input,
    VkSparseImageMemoryRequirements2* output);

void to_proto_VkPhysicalDeviceFeatures2(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceFeatures2* input,
    goldfish_vk_proto::VkPhysicalDeviceFeatures2* output);

void from_proto_VkPhysicalDeviceFeatures2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceFeatures2* input,
    VkPhysicalDeviceFeatures2* output);

void to_proto_VkPhysicalDeviceProperties2(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceProperties2* input,
    goldfish_vk_proto::VkPhysicalDeviceProperties2* output);

void from_proto_VkPhysicalDeviceProperties2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceProperties2* input,
    VkPhysicalDeviceProperties2* output);

void to_proto_VkFormatProperties2(
    VulkanHandleMapping* handleMapping,
    const VkFormatProperties2* input,
    goldfish_vk_proto::VkFormatProperties2* output);

void from_proto_VkFormatProperties2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkFormatProperties2* input,
    VkFormatProperties2* output);

void to_proto_VkImageFormatProperties2(
    VulkanHandleMapping* handleMapping,
    const VkImageFormatProperties2* input,
    goldfish_vk_proto::VkImageFormatProperties2* output);

void from_proto_VkImageFormatProperties2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageFormatProperties2* input,
    VkImageFormatProperties2* output);

void to_proto_VkPhysicalDeviceImageFormatInfo2(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceImageFormatInfo2* input,
    goldfish_vk_proto::VkPhysicalDeviceImageFormatInfo2* output);

void from_proto_VkPhysicalDeviceImageFormatInfo2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceImageFormatInfo2* input,
    VkPhysicalDeviceImageFormatInfo2* output);

void to_proto_VkQueueFamilyProperties2(
    VulkanHandleMapping* handleMapping,
    const VkQueueFamilyProperties2* input,
    goldfish_vk_proto::VkQueueFamilyProperties2* output);

void from_proto_VkQueueFamilyProperties2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkQueueFamilyProperties2* input,
    VkQueueFamilyProperties2* output);

void to_proto_VkPhysicalDeviceMemoryProperties2(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceMemoryProperties2* input,
    goldfish_vk_proto::VkPhysicalDeviceMemoryProperties2* output);

void from_proto_VkPhysicalDeviceMemoryProperties2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceMemoryProperties2* input,
    VkPhysicalDeviceMemoryProperties2* output);

void to_proto_VkSparseImageFormatProperties2(
    VulkanHandleMapping* handleMapping,
    const VkSparseImageFormatProperties2* input,
    goldfish_vk_proto::VkSparseImageFormatProperties2* output);

void from_proto_VkSparseImageFormatProperties2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSparseImageFormatProperties2* input,
    VkSparseImageFormatProperties2* output);

void to_proto_VkPhysicalDeviceSparseImageFormatInfo2(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceSparseImageFormatInfo2* input,
    goldfish_vk_proto::VkPhysicalDeviceSparseImageFormatInfo2* output);

void from_proto_VkPhysicalDeviceSparseImageFormatInfo2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceSparseImageFormatInfo2* input,
    VkPhysicalDeviceSparseImageFormatInfo2* output);

void to_proto_VkPhysicalDevicePointClippingProperties(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDevicePointClippingProperties* input,
    goldfish_vk_proto::VkPhysicalDevicePointClippingProperties* output);

void from_proto_VkPhysicalDevicePointClippingProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDevicePointClippingProperties* input,
    VkPhysicalDevicePointClippingProperties* output);

void to_proto_VkInputAttachmentAspectReference(
    VulkanHandleMapping* handleMapping,
    const VkInputAttachmentAspectReference* input,
    goldfish_vk_proto::VkInputAttachmentAspectReference* output);

void from_proto_VkInputAttachmentAspectReference(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkInputAttachmentAspectReference* input,
    VkInputAttachmentAspectReference* output);

void to_proto_VkRenderPassInputAttachmentAspectCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkRenderPassInputAttachmentAspectCreateInfo* input,
    goldfish_vk_proto::VkRenderPassInputAttachmentAspectCreateInfo* output);

void from_proto_VkRenderPassInputAttachmentAspectCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkRenderPassInputAttachmentAspectCreateInfo* input,
    VkRenderPassInputAttachmentAspectCreateInfo* output);

void to_proto_VkImageViewUsageCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkImageViewUsageCreateInfo* input,
    goldfish_vk_proto::VkImageViewUsageCreateInfo* output);

void from_proto_VkImageViewUsageCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageViewUsageCreateInfo* input,
    VkImageViewUsageCreateInfo* output);

void to_proto_VkPipelineTessellationDomainOriginStateCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkPipelineTessellationDomainOriginStateCreateInfo* input,
    goldfish_vk_proto::VkPipelineTessellationDomainOriginStateCreateInfo* output);

void from_proto_VkPipelineTessellationDomainOriginStateCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineTessellationDomainOriginStateCreateInfo* input,
    VkPipelineTessellationDomainOriginStateCreateInfo* output);

void to_proto_VkRenderPassMultiviewCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkRenderPassMultiviewCreateInfo* input,
    goldfish_vk_proto::VkRenderPassMultiviewCreateInfo* output);

void from_proto_VkRenderPassMultiviewCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkRenderPassMultiviewCreateInfo* input,
    VkRenderPassMultiviewCreateInfo* output);

void to_proto_VkPhysicalDeviceMultiviewFeatures(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceMultiviewFeatures* input,
    goldfish_vk_proto::VkPhysicalDeviceMultiviewFeatures* output);

void from_proto_VkPhysicalDeviceMultiviewFeatures(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceMultiviewFeatures* input,
    VkPhysicalDeviceMultiviewFeatures* output);

void to_proto_VkPhysicalDeviceMultiviewProperties(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceMultiviewProperties* input,
    goldfish_vk_proto::VkPhysicalDeviceMultiviewProperties* output);

void from_proto_VkPhysicalDeviceMultiviewProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceMultiviewProperties* input,
    VkPhysicalDeviceMultiviewProperties* output);

void to_proto_VkPhysicalDeviceVariablePointerFeatures(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceVariablePointerFeatures* input,
    goldfish_vk_proto::VkPhysicalDeviceVariablePointerFeatures* output);

void from_proto_VkPhysicalDeviceVariablePointerFeatures(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceVariablePointerFeatures* input,
    VkPhysicalDeviceVariablePointerFeatures* output);

void to_proto_VkPhysicalDeviceProtectedMemoryFeatures(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceProtectedMemoryFeatures* input,
    goldfish_vk_proto::VkPhysicalDeviceProtectedMemoryFeatures* output);

void from_proto_VkPhysicalDeviceProtectedMemoryFeatures(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceProtectedMemoryFeatures* input,
    VkPhysicalDeviceProtectedMemoryFeatures* output);

void to_proto_VkPhysicalDeviceProtectedMemoryProperties(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceProtectedMemoryProperties* input,
    goldfish_vk_proto::VkPhysicalDeviceProtectedMemoryProperties* output);

void from_proto_VkPhysicalDeviceProtectedMemoryProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceProtectedMemoryProperties* input,
    VkPhysicalDeviceProtectedMemoryProperties* output);

void to_proto_VkDeviceQueueInfo2(
    VulkanHandleMapping* handleMapping,
    const VkDeviceQueueInfo2* input,
    goldfish_vk_proto::VkDeviceQueueInfo2* output);

void from_proto_VkDeviceQueueInfo2(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceQueueInfo2* input,
    VkDeviceQueueInfo2* output);

void to_proto_VkProtectedSubmitInfo(
    VulkanHandleMapping* handleMapping,
    const VkProtectedSubmitInfo* input,
    goldfish_vk_proto::VkProtectedSubmitInfo* output);

void from_proto_VkProtectedSubmitInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkProtectedSubmitInfo* input,
    VkProtectedSubmitInfo* output);

void to_proto_VkSamplerYcbcrConversionCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkSamplerYcbcrConversionCreateInfo* input,
    goldfish_vk_proto::VkSamplerYcbcrConversionCreateInfo* output);

void from_proto_VkSamplerYcbcrConversionCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSamplerYcbcrConversionCreateInfo* input,
    VkSamplerYcbcrConversionCreateInfo* output);

void to_proto_VkSamplerYcbcrConversionInfo(
    VulkanHandleMapping* handleMapping,
    const VkSamplerYcbcrConversionInfo* input,
    goldfish_vk_proto::VkSamplerYcbcrConversionInfo* output);

void from_proto_VkSamplerYcbcrConversionInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSamplerYcbcrConversionInfo* input,
    VkSamplerYcbcrConversionInfo* output);

void to_proto_VkBindImagePlaneMemoryInfo(
    VulkanHandleMapping* handleMapping,
    const VkBindImagePlaneMemoryInfo* input,
    goldfish_vk_proto::VkBindImagePlaneMemoryInfo* output);

void from_proto_VkBindImagePlaneMemoryInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBindImagePlaneMemoryInfo* input,
    VkBindImagePlaneMemoryInfo* output);

void to_proto_VkImagePlaneMemoryRequirementsInfo(
    VulkanHandleMapping* handleMapping,
    const VkImagePlaneMemoryRequirementsInfo* input,
    goldfish_vk_proto::VkImagePlaneMemoryRequirementsInfo* output);

void from_proto_VkImagePlaneMemoryRequirementsInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImagePlaneMemoryRequirementsInfo* input,
    VkImagePlaneMemoryRequirementsInfo* output);

void to_proto_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceSamplerYcbcrConversionFeatures* input,
    goldfish_vk_proto::VkPhysicalDeviceSamplerYcbcrConversionFeatures* output);

void from_proto_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceSamplerYcbcrConversionFeatures* input,
    VkPhysicalDeviceSamplerYcbcrConversionFeatures* output);

void to_proto_VkSamplerYcbcrConversionImageFormatProperties(
    VulkanHandleMapping* handleMapping,
    const VkSamplerYcbcrConversionImageFormatProperties* input,
    goldfish_vk_proto::VkSamplerYcbcrConversionImageFormatProperties* output);

void from_proto_VkSamplerYcbcrConversionImageFormatProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSamplerYcbcrConversionImageFormatProperties* input,
    VkSamplerYcbcrConversionImageFormatProperties* output);

void to_proto_VkDescriptorUpdateTemplateEntry(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorUpdateTemplateEntry* input,
    goldfish_vk_proto::VkDescriptorUpdateTemplateEntry* output);

void from_proto_VkDescriptorUpdateTemplateEntry(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorUpdateTemplateEntry* input,
    VkDescriptorUpdateTemplateEntry* output);

void to_proto_VkDescriptorUpdateTemplateCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorUpdateTemplateCreateInfo* input,
    goldfish_vk_proto::VkDescriptorUpdateTemplateCreateInfo* output);

void from_proto_VkDescriptorUpdateTemplateCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorUpdateTemplateCreateInfo* input,
    VkDescriptorUpdateTemplateCreateInfo* output);

void to_proto_VkExternalMemoryProperties(
    VulkanHandleMapping* handleMapping,
    const VkExternalMemoryProperties* input,
    goldfish_vk_proto::VkExternalMemoryProperties* output);

void from_proto_VkExternalMemoryProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExternalMemoryProperties* input,
    VkExternalMemoryProperties* output);

void to_proto_VkPhysicalDeviceExternalImageFormatInfo(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceExternalImageFormatInfo* input,
    goldfish_vk_proto::VkPhysicalDeviceExternalImageFormatInfo* output);

void from_proto_VkPhysicalDeviceExternalImageFormatInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceExternalImageFormatInfo* input,
    VkPhysicalDeviceExternalImageFormatInfo* output);

void to_proto_VkExternalImageFormatProperties(
    VulkanHandleMapping* handleMapping,
    const VkExternalImageFormatProperties* input,
    goldfish_vk_proto::VkExternalImageFormatProperties* output);

void from_proto_VkExternalImageFormatProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExternalImageFormatProperties* input,
    VkExternalImageFormatProperties* output);

void to_proto_VkPhysicalDeviceExternalBufferInfo(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceExternalBufferInfo* input,
    goldfish_vk_proto::VkPhysicalDeviceExternalBufferInfo* output);

void from_proto_VkPhysicalDeviceExternalBufferInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceExternalBufferInfo* input,
    VkPhysicalDeviceExternalBufferInfo* output);

void to_proto_VkExternalBufferProperties(
    VulkanHandleMapping* handleMapping,
    const VkExternalBufferProperties* input,
    goldfish_vk_proto::VkExternalBufferProperties* output);

void from_proto_VkExternalBufferProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExternalBufferProperties* input,
    VkExternalBufferProperties* output);

void to_proto_VkPhysicalDeviceIDProperties(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceIDProperties* input,
    goldfish_vk_proto::VkPhysicalDeviceIDProperties* output);

void from_proto_VkPhysicalDeviceIDProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceIDProperties* input,
    VkPhysicalDeviceIDProperties* output);

void to_proto_VkExternalMemoryImageCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkExternalMemoryImageCreateInfo* input,
    goldfish_vk_proto::VkExternalMemoryImageCreateInfo* output);

void from_proto_VkExternalMemoryImageCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExternalMemoryImageCreateInfo* input,
    VkExternalMemoryImageCreateInfo* output);

void to_proto_VkExternalMemoryBufferCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkExternalMemoryBufferCreateInfo* input,
    goldfish_vk_proto::VkExternalMemoryBufferCreateInfo* output);

void from_proto_VkExternalMemoryBufferCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExternalMemoryBufferCreateInfo* input,
    VkExternalMemoryBufferCreateInfo* output);

void to_proto_VkExportMemoryAllocateInfo(
    VulkanHandleMapping* handleMapping,
    const VkExportMemoryAllocateInfo* input,
    goldfish_vk_proto::VkExportMemoryAllocateInfo* output);

void from_proto_VkExportMemoryAllocateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExportMemoryAllocateInfo* input,
    VkExportMemoryAllocateInfo* output);

void to_proto_VkPhysicalDeviceExternalFenceInfo(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceExternalFenceInfo* input,
    goldfish_vk_proto::VkPhysicalDeviceExternalFenceInfo* output);

void from_proto_VkPhysicalDeviceExternalFenceInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceExternalFenceInfo* input,
    VkPhysicalDeviceExternalFenceInfo* output);

void to_proto_VkExternalFenceProperties(
    VulkanHandleMapping* handleMapping,
    const VkExternalFenceProperties* input,
    goldfish_vk_proto::VkExternalFenceProperties* output);

void from_proto_VkExternalFenceProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExternalFenceProperties* input,
    VkExternalFenceProperties* output);

void to_proto_VkExportFenceCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkExportFenceCreateInfo* input,
    goldfish_vk_proto::VkExportFenceCreateInfo* output);

void from_proto_VkExportFenceCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExportFenceCreateInfo* input,
    VkExportFenceCreateInfo* output);

void to_proto_VkExportSemaphoreCreateInfo(
    VulkanHandleMapping* handleMapping,
    const VkExportSemaphoreCreateInfo* input,
    goldfish_vk_proto::VkExportSemaphoreCreateInfo* output);

void from_proto_VkExportSemaphoreCreateInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExportSemaphoreCreateInfo* input,
    VkExportSemaphoreCreateInfo* output);

void to_proto_VkPhysicalDeviceExternalSemaphoreInfo(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceExternalSemaphoreInfo* input,
    goldfish_vk_proto::VkPhysicalDeviceExternalSemaphoreInfo* output);

void from_proto_VkPhysicalDeviceExternalSemaphoreInfo(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceExternalSemaphoreInfo* input,
    VkPhysicalDeviceExternalSemaphoreInfo* output);

void to_proto_VkExternalSemaphoreProperties(
    VulkanHandleMapping* handleMapping,
    const VkExternalSemaphoreProperties* input,
    goldfish_vk_proto::VkExternalSemaphoreProperties* output);

void from_proto_VkExternalSemaphoreProperties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExternalSemaphoreProperties* input,
    VkExternalSemaphoreProperties* output);

void to_proto_VkPhysicalDeviceMaintenance3Properties(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceMaintenance3Properties* input,
    goldfish_vk_proto::VkPhysicalDeviceMaintenance3Properties* output);

void from_proto_VkPhysicalDeviceMaintenance3Properties(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceMaintenance3Properties* input,
    VkPhysicalDeviceMaintenance3Properties* output);

void to_proto_VkDescriptorSetLayoutSupport(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorSetLayoutSupport* input,
    goldfish_vk_proto::VkDescriptorSetLayoutSupport* output);

void from_proto_VkDescriptorSetLayoutSupport(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorSetLayoutSupport* input,
    VkDescriptorSetLayoutSupport* output);

void to_proto_VkPhysicalDeviceShaderDrawParameterFeatures(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceShaderDrawParameterFeatures* input,
    goldfish_vk_proto::VkPhysicalDeviceShaderDrawParameterFeatures* output);

void from_proto_VkPhysicalDeviceShaderDrawParameterFeatures(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceShaderDrawParameterFeatures* input,
    VkPhysicalDeviceShaderDrawParameterFeatures* output);

#endif
#ifdef VK_KHR_surface
void to_proto_VkSurfaceCapabilitiesKHR(
    VulkanHandleMapping* handleMapping,
    const VkSurfaceCapabilitiesKHR* input,
    goldfish_vk_proto::VkSurfaceCapabilitiesKHR* output);

void from_proto_VkSurfaceCapabilitiesKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSurfaceCapabilitiesKHR* input,
    VkSurfaceCapabilitiesKHR* output);

void to_proto_VkSurfaceFormatKHR(
    VulkanHandleMapping* handleMapping,
    const VkSurfaceFormatKHR* input,
    goldfish_vk_proto::VkSurfaceFormatKHR* output);

void from_proto_VkSurfaceFormatKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSurfaceFormatKHR* input,
    VkSurfaceFormatKHR* output);

#endif
#ifdef VK_KHR_swapchain
void to_proto_VkSwapchainCreateInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkSwapchainCreateInfoKHR* input,
    goldfish_vk_proto::VkSwapchainCreateInfoKHR* output);

void from_proto_VkSwapchainCreateInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSwapchainCreateInfoKHR* input,
    VkSwapchainCreateInfoKHR* output);

void to_proto_VkPresentInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkPresentInfoKHR* input,
    goldfish_vk_proto::VkPresentInfoKHR* output);

void from_proto_VkPresentInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPresentInfoKHR* input,
    VkPresentInfoKHR* output);

void to_proto_VkImageSwapchainCreateInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkImageSwapchainCreateInfoKHR* input,
    goldfish_vk_proto::VkImageSwapchainCreateInfoKHR* output);

void from_proto_VkImageSwapchainCreateInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageSwapchainCreateInfoKHR* input,
    VkImageSwapchainCreateInfoKHR* output);

void to_proto_VkBindImageMemorySwapchainInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkBindImageMemorySwapchainInfoKHR* input,
    goldfish_vk_proto::VkBindImageMemorySwapchainInfoKHR* output);

void from_proto_VkBindImageMemorySwapchainInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkBindImageMemorySwapchainInfoKHR* input,
    VkBindImageMemorySwapchainInfoKHR* output);

void to_proto_VkAcquireNextImageInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkAcquireNextImageInfoKHR* input,
    goldfish_vk_proto::VkAcquireNextImageInfoKHR* output);

void from_proto_VkAcquireNextImageInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkAcquireNextImageInfoKHR* input,
    VkAcquireNextImageInfoKHR* output);

void to_proto_VkDeviceGroupPresentCapabilitiesKHR(
    VulkanHandleMapping* handleMapping,
    const VkDeviceGroupPresentCapabilitiesKHR* input,
    goldfish_vk_proto::VkDeviceGroupPresentCapabilitiesKHR* output);

void from_proto_VkDeviceGroupPresentCapabilitiesKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceGroupPresentCapabilitiesKHR* input,
    VkDeviceGroupPresentCapabilitiesKHR* output);

void to_proto_VkDeviceGroupPresentInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkDeviceGroupPresentInfoKHR* input,
    goldfish_vk_proto::VkDeviceGroupPresentInfoKHR* output);

void from_proto_VkDeviceGroupPresentInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceGroupPresentInfoKHR* input,
    VkDeviceGroupPresentInfoKHR* output);

void to_proto_VkDeviceGroupSwapchainCreateInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkDeviceGroupSwapchainCreateInfoKHR* input,
    goldfish_vk_proto::VkDeviceGroupSwapchainCreateInfoKHR* output);

void from_proto_VkDeviceGroupSwapchainCreateInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceGroupSwapchainCreateInfoKHR* input,
    VkDeviceGroupSwapchainCreateInfoKHR* output);

#endif
#ifdef VK_KHR_display
void to_proto_VkDisplayPropertiesKHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplayPropertiesKHR* input,
    goldfish_vk_proto::VkDisplayPropertiesKHR* output);

void from_proto_VkDisplayPropertiesKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayPropertiesKHR* input,
    VkDisplayPropertiesKHR* output);

void to_proto_VkDisplayModeParametersKHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplayModeParametersKHR* input,
    goldfish_vk_proto::VkDisplayModeParametersKHR* output);

void from_proto_VkDisplayModeParametersKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayModeParametersKHR* input,
    VkDisplayModeParametersKHR* output);

void to_proto_VkDisplayModePropertiesKHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplayModePropertiesKHR* input,
    goldfish_vk_proto::VkDisplayModePropertiesKHR* output);

void from_proto_VkDisplayModePropertiesKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayModePropertiesKHR* input,
    VkDisplayModePropertiesKHR* output);

void to_proto_VkDisplayModeCreateInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplayModeCreateInfoKHR* input,
    goldfish_vk_proto::VkDisplayModeCreateInfoKHR* output);

void from_proto_VkDisplayModeCreateInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayModeCreateInfoKHR* input,
    VkDisplayModeCreateInfoKHR* output);

void to_proto_VkDisplayPlaneCapabilitiesKHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplayPlaneCapabilitiesKHR* input,
    goldfish_vk_proto::VkDisplayPlaneCapabilitiesKHR* output);

void from_proto_VkDisplayPlaneCapabilitiesKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayPlaneCapabilitiesKHR* input,
    VkDisplayPlaneCapabilitiesKHR* output);

void to_proto_VkDisplayPlanePropertiesKHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplayPlanePropertiesKHR* input,
    goldfish_vk_proto::VkDisplayPlanePropertiesKHR* output);

void from_proto_VkDisplayPlanePropertiesKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayPlanePropertiesKHR* input,
    VkDisplayPlanePropertiesKHR* output);

void to_proto_VkDisplaySurfaceCreateInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplaySurfaceCreateInfoKHR* input,
    goldfish_vk_proto::VkDisplaySurfaceCreateInfoKHR* output);

void from_proto_VkDisplaySurfaceCreateInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplaySurfaceCreateInfoKHR* input,
    VkDisplaySurfaceCreateInfoKHR* output);

#endif
#ifdef VK_KHR_display_swapchain
void to_proto_VkDisplayPresentInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplayPresentInfoKHR* input,
    goldfish_vk_proto::VkDisplayPresentInfoKHR* output);

void from_proto_VkDisplayPresentInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayPresentInfoKHR* input,
    VkDisplayPresentInfoKHR* output);

#endif
#ifdef VK_KHR_xlib_surface
void to_proto_VkXlibSurfaceCreateInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkXlibSurfaceCreateInfoKHR* input,
    goldfish_vk_proto::VkXlibSurfaceCreateInfoKHR* output);

void from_proto_VkXlibSurfaceCreateInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkXlibSurfaceCreateInfoKHR* input,
    VkXlibSurfaceCreateInfoKHR* output);

#endif
#ifdef VK_KHR_xcb_surface
void to_proto_VkXcbSurfaceCreateInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkXcbSurfaceCreateInfoKHR* input,
    goldfish_vk_proto::VkXcbSurfaceCreateInfoKHR* output);

void from_proto_VkXcbSurfaceCreateInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkXcbSurfaceCreateInfoKHR* input,
    VkXcbSurfaceCreateInfoKHR* output);

#endif
#ifdef VK_KHR_wayland_surface
void to_proto_VkWaylandSurfaceCreateInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkWaylandSurfaceCreateInfoKHR* input,
    goldfish_vk_proto::VkWaylandSurfaceCreateInfoKHR* output);

void from_proto_VkWaylandSurfaceCreateInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkWaylandSurfaceCreateInfoKHR* input,
    VkWaylandSurfaceCreateInfoKHR* output);

#endif
#ifdef VK_KHR_mir_surface
void to_proto_VkMirSurfaceCreateInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkMirSurfaceCreateInfoKHR* input,
    goldfish_vk_proto::VkMirSurfaceCreateInfoKHR* output);

void from_proto_VkMirSurfaceCreateInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMirSurfaceCreateInfoKHR* input,
    VkMirSurfaceCreateInfoKHR* output);

#endif
#ifdef VK_KHR_android_surface
void to_proto_VkAndroidSurfaceCreateInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkAndroidSurfaceCreateInfoKHR* input,
    goldfish_vk_proto::VkAndroidSurfaceCreateInfoKHR* output);

void from_proto_VkAndroidSurfaceCreateInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkAndroidSurfaceCreateInfoKHR* input,
    VkAndroidSurfaceCreateInfoKHR* output);

#endif
#ifdef VK_KHR_win32_surface
void to_proto_VkWin32SurfaceCreateInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkWin32SurfaceCreateInfoKHR* input,
    goldfish_vk_proto::VkWin32SurfaceCreateInfoKHR* output);

void from_proto_VkWin32SurfaceCreateInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkWin32SurfaceCreateInfoKHR* input,
    VkWin32SurfaceCreateInfoKHR* output);

#endif
#ifdef VK_KHR_sampler_mirror_clamp_to_edge
#endif
#ifdef VK_KHR_multiview
#endif
#ifdef VK_KHR_get_physical_device_properties2
#endif
#ifdef VK_KHR_device_group
#endif
#ifdef VK_KHR_shader_draw_parameters
#endif
#ifdef VK_KHR_maintenance1
#endif
#ifdef VK_KHR_device_group_creation
#endif
#ifdef VK_KHR_external_memory_capabilities
#endif
#ifdef VK_KHR_external_memory
#endif
#ifdef VK_KHR_external_memory_win32
void to_proto_VkImportMemoryWin32HandleInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkImportMemoryWin32HandleInfoKHR* input,
    goldfish_vk_proto::VkImportMemoryWin32HandleInfoKHR* output);

void from_proto_VkImportMemoryWin32HandleInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImportMemoryWin32HandleInfoKHR* input,
    VkImportMemoryWin32HandleInfoKHR* output);

void to_proto_VkExportMemoryWin32HandleInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkExportMemoryWin32HandleInfoKHR* input,
    goldfish_vk_proto::VkExportMemoryWin32HandleInfoKHR* output);

void from_proto_VkExportMemoryWin32HandleInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExportMemoryWin32HandleInfoKHR* input,
    VkExportMemoryWin32HandleInfoKHR* output);

void to_proto_VkMemoryWin32HandlePropertiesKHR(
    VulkanHandleMapping* handleMapping,
    const VkMemoryWin32HandlePropertiesKHR* input,
    goldfish_vk_proto::VkMemoryWin32HandlePropertiesKHR* output);

void from_proto_VkMemoryWin32HandlePropertiesKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryWin32HandlePropertiesKHR* input,
    VkMemoryWin32HandlePropertiesKHR* output);

void to_proto_VkMemoryGetWin32HandleInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkMemoryGetWin32HandleInfoKHR* input,
    goldfish_vk_proto::VkMemoryGetWin32HandleInfoKHR* output);

void from_proto_VkMemoryGetWin32HandleInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryGetWin32HandleInfoKHR* input,
    VkMemoryGetWin32HandleInfoKHR* output);

#endif
#ifdef VK_KHR_external_memory_fd
void to_proto_VkImportMemoryFdInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkImportMemoryFdInfoKHR* input,
    goldfish_vk_proto::VkImportMemoryFdInfoKHR* output);

void from_proto_VkImportMemoryFdInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImportMemoryFdInfoKHR* input,
    VkImportMemoryFdInfoKHR* output);

void to_proto_VkMemoryFdPropertiesKHR(
    VulkanHandleMapping* handleMapping,
    const VkMemoryFdPropertiesKHR* input,
    goldfish_vk_proto::VkMemoryFdPropertiesKHR* output);

void from_proto_VkMemoryFdPropertiesKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryFdPropertiesKHR* input,
    VkMemoryFdPropertiesKHR* output);

void to_proto_VkMemoryGetFdInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkMemoryGetFdInfoKHR* input,
    goldfish_vk_proto::VkMemoryGetFdInfoKHR* output);

void from_proto_VkMemoryGetFdInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryGetFdInfoKHR* input,
    VkMemoryGetFdInfoKHR* output);

#endif
#ifdef VK_KHR_win32_keyed_mutex
void to_proto_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkWin32KeyedMutexAcquireReleaseInfoKHR* input,
    goldfish_vk_proto::VkWin32KeyedMutexAcquireReleaseInfoKHR* output);

void from_proto_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkWin32KeyedMutexAcquireReleaseInfoKHR* input,
    VkWin32KeyedMutexAcquireReleaseInfoKHR* output);

#endif
#ifdef VK_KHR_external_semaphore_capabilities
#endif
#ifdef VK_KHR_external_semaphore
#endif
#ifdef VK_KHR_external_semaphore_win32
void to_proto_VkImportSemaphoreWin32HandleInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkImportSemaphoreWin32HandleInfoKHR* input,
    goldfish_vk_proto::VkImportSemaphoreWin32HandleInfoKHR* output);

void from_proto_VkImportSemaphoreWin32HandleInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImportSemaphoreWin32HandleInfoKHR* input,
    VkImportSemaphoreWin32HandleInfoKHR* output);

void to_proto_VkExportSemaphoreWin32HandleInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkExportSemaphoreWin32HandleInfoKHR* input,
    goldfish_vk_proto::VkExportSemaphoreWin32HandleInfoKHR* output);

void from_proto_VkExportSemaphoreWin32HandleInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExportSemaphoreWin32HandleInfoKHR* input,
    VkExportSemaphoreWin32HandleInfoKHR* output);

void to_proto_VkD3D12FenceSubmitInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkD3D12FenceSubmitInfoKHR* input,
    goldfish_vk_proto::VkD3D12FenceSubmitInfoKHR* output);

void from_proto_VkD3D12FenceSubmitInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkD3D12FenceSubmitInfoKHR* input,
    VkD3D12FenceSubmitInfoKHR* output);

void to_proto_VkSemaphoreGetWin32HandleInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkSemaphoreGetWin32HandleInfoKHR* input,
    goldfish_vk_proto::VkSemaphoreGetWin32HandleInfoKHR* output);

void from_proto_VkSemaphoreGetWin32HandleInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSemaphoreGetWin32HandleInfoKHR* input,
    VkSemaphoreGetWin32HandleInfoKHR* output);

#endif
#ifdef VK_KHR_external_semaphore_fd
void to_proto_VkImportSemaphoreFdInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkImportSemaphoreFdInfoKHR* input,
    goldfish_vk_proto::VkImportSemaphoreFdInfoKHR* output);

void from_proto_VkImportSemaphoreFdInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImportSemaphoreFdInfoKHR* input,
    VkImportSemaphoreFdInfoKHR* output);

void to_proto_VkSemaphoreGetFdInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkSemaphoreGetFdInfoKHR* input,
    goldfish_vk_proto::VkSemaphoreGetFdInfoKHR* output);

void from_proto_VkSemaphoreGetFdInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSemaphoreGetFdInfoKHR* input,
    VkSemaphoreGetFdInfoKHR* output);

#endif
#ifdef VK_KHR_push_descriptor
void to_proto_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDevicePushDescriptorPropertiesKHR* input,
    goldfish_vk_proto::VkPhysicalDevicePushDescriptorPropertiesKHR* output);

void from_proto_VkPhysicalDevicePushDescriptorPropertiesKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDevicePushDescriptorPropertiesKHR* input,
    VkPhysicalDevicePushDescriptorPropertiesKHR* output);

#endif
#ifdef VK_KHR_16bit_storage
#endif
#ifdef VK_KHR_incremental_present
void to_proto_VkRectLayerKHR(
    VulkanHandleMapping* handleMapping,
    const VkRectLayerKHR* input,
    goldfish_vk_proto::VkRectLayerKHR* output);

void from_proto_VkRectLayerKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkRectLayerKHR* input,
    VkRectLayerKHR* output);

void to_proto_VkPresentRegionKHR(
    VulkanHandleMapping* handleMapping,
    const VkPresentRegionKHR* input,
    goldfish_vk_proto::VkPresentRegionKHR* output);

void from_proto_VkPresentRegionKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPresentRegionKHR* input,
    VkPresentRegionKHR* output);

void to_proto_VkPresentRegionsKHR(
    VulkanHandleMapping* handleMapping,
    const VkPresentRegionsKHR* input,
    goldfish_vk_proto::VkPresentRegionsKHR* output);

void from_proto_VkPresentRegionsKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPresentRegionsKHR* input,
    VkPresentRegionsKHR* output);

#endif
#ifdef VK_KHR_descriptor_update_template
#endif
#ifdef VK_KHR_create_renderpass2
void to_proto_VkAttachmentDescription2KHR(
    VulkanHandleMapping* handleMapping,
    const VkAttachmentDescription2KHR* input,
    goldfish_vk_proto::VkAttachmentDescription2KHR* output);

void from_proto_VkAttachmentDescription2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkAttachmentDescription2KHR* input,
    VkAttachmentDescription2KHR* output);

void to_proto_VkAttachmentReference2KHR(
    VulkanHandleMapping* handleMapping,
    const VkAttachmentReference2KHR* input,
    goldfish_vk_proto::VkAttachmentReference2KHR* output);

void from_proto_VkAttachmentReference2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkAttachmentReference2KHR* input,
    VkAttachmentReference2KHR* output);

void to_proto_VkSubpassDescription2KHR(
    VulkanHandleMapping* handleMapping,
    const VkSubpassDescription2KHR* input,
    goldfish_vk_proto::VkSubpassDescription2KHR* output);

void from_proto_VkSubpassDescription2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSubpassDescription2KHR* input,
    VkSubpassDescription2KHR* output);

void to_proto_VkSubpassDependency2KHR(
    VulkanHandleMapping* handleMapping,
    const VkSubpassDependency2KHR* input,
    goldfish_vk_proto::VkSubpassDependency2KHR* output);

void from_proto_VkSubpassDependency2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSubpassDependency2KHR* input,
    VkSubpassDependency2KHR* output);

void to_proto_VkRenderPassCreateInfo2KHR(
    VulkanHandleMapping* handleMapping,
    const VkRenderPassCreateInfo2KHR* input,
    goldfish_vk_proto::VkRenderPassCreateInfo2KHR* output);

void from_proto_VkRenderPassCreateInfo2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkRenderPassCreateInfo2KHR* input,
    VkRenderPassCreateInfo2KHR* output);

void to_proto_VkSubpassBeginInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkSubpassBeginInfoKHR* input,
    goldfish_vk_proto::VkSubpassBeginInfoKHR* output);

void from_proto_VkSubpassBeginInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSubpassBeginInfoKHR* input,
    VkSubpassBeginInfoKHR* output);

void to_proto_VkSubpassEndInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkSubpassEndInfoKHR* input,
    goldfish_vk_proto::VkSubpassEndInfoKHR* output);

void from_proto_VkSubpassEndInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSubpassEndInfoKHR* input,
    VkSubpassEndInfoKHR* output);

#endif
#ifdef VK_KHR_shared_presentable_image
void to_proto_VkSharedPresentSurfaceCapabilitiesKHR(
    VulkanHandleMapping* handleMapping,
    const VkSharedPresentSurfaceCapabilitiesKHR* input,
    goldfish_vk_proto::VkSharedPresentSurfaceCapabilitiesKHR* output);

void from_proto_VkSharedPresentSurfaceCapabilitiesKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSharedPresentSurfaceCapabilitiesKHR* input,
    VkSharedPresentSurfaceCapabilitiesKHR* output);

#endif
#ifdef VK_KHR_external_fence_capabilities
#endif
#ifdef VK_KHR_external_fence
#endif
#ifdef VK_KHR_external_fence_win32
void to_proto_VkImportFenceWin32HandleInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkImportFenceWin32HandleInfoKHR* input,
    goldfish_vk_proto::VkImportFenceWin32HandleInfoKHR* output);

void from_proto_VkImportFenceWin32HandleInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImportFenceWin32HandleInfoKHR* input,
    VkImportFenceWin32HandleInfoKHR* output);

void to_proto_VkExportFenceWin32HandleInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkExportFenceWin32HandleInfoKHR* input,
    goldfish_vk_proto::VkExportFenceWin32HandleInfoKHR* output);

void from_proto_VkExportFenceWin32HandleInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExportFenceWin32HandleInfoKHR* input,
    VkExportFenceWin32HandleInfoKHR* output);

void to_proto_VkFenceGetWin32HandleInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkFenceGetWin32HandleInfoKHR* input,
    goldfish_vk_proto::VkFenceGetWin32HandleInfoKHR* output);

void from_proto_VkFenceGetWin32HandleInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkFenceGetWin32HandleInfoKHR* input,
    VkFenceGetWin32HandleInfoKHR* output);

#endif
#ifdef VK_KHR_external_fence_fd
void to_proto_VkImportFenceFdInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkImportFenceFdInfoKHR* input,
    goldfish_vk_proto::VkImportFenceFdInfoKHR* output);

void from_proto_VkImportFenceFdInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImportFenceFdInfoKHR* input,
    VkImportFenceFdInfoKHR* output);

void to_proto_VkFenceGetFdInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkFenceGetFdInfoKHR* input,
    goldfish_vk_proto::VkFenceGetFdInfoKHR* output);

void from_proto_VkFenceGetFdInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkFenceGetFdInfoKHR* input,
    VkFenceGetFdInfoKHR* output);

#endif
#ifdef VK_KHR_maintenance2
#endif
#ifdef VK_KHR_get_surface_capabilities2
void to_proto_VkPhysicalDeviceSurfaceInfo2KHR(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceSurfaceInfo2KHR* input,
    goldfish_vk_proto::VkPhysicalDeviceSurfaceInfo2KHR* output);

void from_proto_VkPhysicalDeviceSurfaceInfo2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceSurfaceInfo2KHR* input,
    VkPhysicalDeviceSurfaceInfo2KHR* output);

void to_proto_VkSurfaceCapabilities2KHR(
    VulkanHandleMapping* handleMapping,
    const VkSurfaceCapabilities2KHR* input,
    goldfish_vk_proto::VkSurfaceCapabilities2KHR* output);

void from_proto_VkSurfaceCapabilities2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSurfaceCapabilities2KHR* input,
    VkSurfaceCapabilities2KHR* output);

void to_proto_VkSurfaceFormat2KHR(
    VulkanHandleMapping* handleMapping,
    const VkSurfaceFormat2KHR* input,
    goldfish_vk_proto::VkSurfaceFormat2KHR* output);

void from_proto_VkSurfaceFormat2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSurfaceFormat2KHR* input,
    VkSurfaceFormat2KHR* output);

#endif
#ifdef VK_KHR_variable_pointers
#endif
#ifdef VK_KHR_get_display_properties2
void to_proto_VkDisplayProperties2KHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplayProperties2KHR* input,
    goldfish_vk_proto::VkDisplayProperties2KHR* output);

void from_proto_VkDisplayProperties2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayProperties2KHR* input,
    VkDisplayProperties2KHR* output);

void to_proto_VkDisplayPlaneProperties2KHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplayPlaneProperties2KHR* input,
    goldfish_vk_proto::VkDisplayPlaneProperties2KHR* output);

void from_proto_VkDisplayPlaneProperties2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayPlaneProperties2KHR* input,
    VkDisplayPlaneProperties2KHR* output);

void to_proto_VkDisplayModeProperties2KHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplayModeProperties2KHR* input,
    goldfish_vk_proto::VkDisplayModeProperties2KHR* output);

void from_proto_VkDisplayModeProperties2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayModeProperties2KHR* input,
    VkDisplayModeProperties2KHR* output);

void to_proto_VkDisplayPlaneInfo2KHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplayPlaneInfo2KHR* input,
    goldfish_vk_proto::VkDisplayPlaneInfo2KHR* output);

void from_proto_VkDisplayPlaneInfo2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayPlaneInfo2KHR* input,
    VkDisplayPlaneInfo2KHR* output);

void to_proto_VkDisplayPlaneCapabilities2KHR(
    VulkanHandleMapping* handleMapping,
    const VkDisplayPlaneCapabilities2KHR* input,
    goldfish_vk_proto::VkDisplayPlaneCapabilities2KHR* output);

void from_proto_VkDisplayPlaneCapabilities2KHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayPlaneCapabilities2KHR* input,
    VkDisplayPlaneCapabilities2KHR* output);

#endif
#ifdef VK_KHR_dedicated_allocation
#endif
#ifdef VK_KHR_storage_buffer_storage_class
#endif
#ifdef VK_KHR_relaxed_block_layout
#endif
#ifdef VK_KHR_get_memory_requirements2
#endif
#ifdef VK_KHR_image_format_list
void to_proto_VkImageFormatListCreateInfoKHR(
    VulkanHandleMapping* handleMapping,
    const VkImageFormatListCreateInfoKHR* input,
    goldfish_vk_proto::VkImageFormatListCreateInfoKHR* output);

void from_proto_VkImageFormatListCreateInfoKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImageFormatListCreateInfoKHR* input,
    VkImageFormatListCreateInfoKHR* output);

#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
#endif
#ifdef VK_KHR_bind_memory2
#endif
#ifdef VK_KHR_maintenance3
#endif
#ifdef VK_KHR_draw_indirect_count
#endif
#ifdef VK_KHR_8bit_storage
void to_proto_VkPhysicalDevice8BitStorageFeaturesKHR(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDevice8BitStorageFeaturesKHR* input,
    goldfish_vk_proto::VkPhysicalDevice8BitStorageFeaturesKHR* output);

void from_proto_VkPhysicalDevice8BitStorageFeaturesKHR(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDevice8BitStorageFeaturesKHR* input,
    VkPhysicalDevice8BitStorageFeaturesKHR* output);

#endif
#ifdef VK_ANDROID_native_buffer
void to_proto_VkNativeBufferANDROID(
    VulkanHandleMapping* handleMapping,
    const VkNativeBufferANDROID* input,
    goldfish_vk_proto::VkNativeBufferANDROID* output);

void from_proto_VkNativeBufferANDROID(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkNativeBufferANDROID* input,
    VkNativeBufferANDROID* output);

#endif
#ifdef VK_EXT_debug_report
void to_proto_VkDebugReportCallbackCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDebugReportCallbackCreateInfoEXT* input,
    goldfish_vk_proto::VkDebugReportCallbackCreateInfoEXT* output);

void from_proto_VkDebugReportCallbackCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDebugReportCallbackCreateInfoEXT* input,
    VkDebugReportCallbackCreateInfoEXT* output);

#endif
#ifdef VK_NV_glsl_shader
#endif
#ifdef VK_EXT_depth_range_unrestricted
#endif
#ifdef VK_IMG_filter_cubic
#endif
#ifdef VK_AMD_rasterization_order
void to_proto_VkPipelineRasterizationStateRasterizationOrderAMD(
    VulkanHandleMapping* handleMapping,
    const VkPipelineRasterizationStateRasterizationOrderAMD* input,
    goldfish_vk_proto::VkPipelineRasterizationStateRasterizationOrderAMD* output);

void from_proto_VkPipelineRasterizationStateRasterizationOrderAMD(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineRasterizationStateRasterizationOrderAMD* input,
    VkPipelineRasterizationStateRasterizationOrderAMD* output);

#endif
#ifdef VK_AMD_shader_trinary_minmax
#endif
#ifdef VK_AMD_shader_explicit_vertex_parameter
#endif
#ifdef VK_EXT_debug_marker
void to_proto_VkDebugMarkerObjectNameInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDebugMarkerObjectNameInfoEXT* input,
    goldfish_vk_proto::VkDebugMarkerObjectNameInfoEXT* output);

void from_proto_VkDebugMarkerObjectNameInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDebugMarkerObjectNameInfoEXT* input,
    VkDebugMarkerObjectNameInfoEXT* output);

void to_proto_VkDebugMarkerObjectTagInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDebugMarkerObjectTagInfoEXT* input,
    goldfish_vk_proto::VkDebugMarkerObjectTagInfoEXT* output);

void from_proto_VkDebugMarkerObjectTagInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDebugMarkerObjectTagInfoEXT* input,
    VkDebugMarkerObjectTagInfoEXT* output);

void to_proto_VkDebugMarkerMarkerInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDebugMarkerMarkerInfoEXT* input,
    goldfish_vk_proto::VkDebugMarkerMarkerInfoEXT* output);

void from_proto_VkDebugMarkerMarkerInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDebugMarkerMarkerInfoEXT* input,
    VkDebugMarkerMarkerInfoEXT* output);

#endif
#ifdef VK_AMD_gcn_shader
#endif
#ifdef VK_NV_dedicated_allocation
void to_proto_VkDedicatedAllocationImageCreateInfoNV(
    VulkanHandleMapping* handleMapping,
    const VkDedicatedAllocationImageCreateInfoNV* input,
    goldfish_vk_proto::VkDedicatedAllocationImageCreateInfoNV* output);

void from_proto_VkDedicatedAllocationImageCreateInfoNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDedicatedAllocationImageCreateInfoNV* input,
    VkDedicatedAllocationImageCreateInfoNV* output);

void to_proto_VkDedicatedAllocationBufferCreateInfoNV(
    VulkanHandleMapping* handleMapping,
    const VkDedicatedAllocationBufferCreateInfoNV* input,
    goldfish_vk_proto::VkDedicatedAllocationBufferCreateInfoNV* output);

void from_proto_VkDedicatedAllocationBufferCreateInfoNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDedicatedAllocationBufferCreateInfoNV* input,
    VkDedicatedAllocationBufferCreateInfoNV* output);

void to_proto_VkDedicatedAllocationMemoryAllocateInfoNV(
    VulkanHandleMapping* handleMapping,
    const VkDedicatedAllocationMemoryAllocateInfoNV* input,
    goldfish_vk_proto::VkDedicatedAllocationMemoryAllocateInfoNV* output);

void from_proto_VkDedicatedAllocationMemoryAllocateInfoNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDedicatedAllocationMemoryAllocateInfoNV* input,
    VkDedicatedAllocationMemoryAllocateInfoNV* output);

#endif
#ifdef VK_AMD_draw_indirect_count
#endif
#ifdef VK_AMD_negative_viewport_height
#endif
#ifdef VK_AMD_gpu_shader_half_float
#endif
#ifdef VK_AMD_shader_ballot
#endif
#ifdef VK_AMD_texture_gather_bias_lod
void to_proto_VkTextureLODGatherFormatPropertiesAMD(
    VulkanHandleMapping* handleMapping,
    const VkTextureLODGatherFormatPropertiesAMD* input,
    goldfish_vk_proto::VkTextureLODGatherFormatPropertiesAMD* output);

void from_proto_VkTextureLODGatherFormatPropertiesAMD(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkTextureLODGatherFormatPropertiesAMD* input,
    VkTextureLODGatherFormatPropertiesAMD* output);

#endif
#ifdef VK_AMD_shader_info
void to_proto_VkShaderResourceUsageAMD(
    VulkanHandleMapping* handleMapping,
    const VkShaderResourceUsageAMD* input,
    goldfish_vk_proto::VkShaderResourceUsageAMD* output);

void from_proto_VkShaderResourceUsageAMD(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkShaderResourceUsageAMD* input,
    VkShaderResourceUsageAMD* output);

void to_proto_VkShaderStatisticsInfoAMD(
    VulkanHandleMapping* handleMapping,
    const VkShaderStatisticsInfoAMD* input,
    goldfish_vk_proto::VkShaderStatisticsInfoAMD* output);

void from_proto_VkShaderStatisticsInfoAMD(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkShaderStatisticsInfoAMD* input,
    VkShaderStatisticsInfoAMD* output);

#endif
#ifdef VK_AMD_shader_image_load_store_lod
#endif
#ifdef VK_IMG_format_pvrtc
#endif
#ifdef VK_NV_external_memory_capabilities
void to_proto_VkExternalImageFormatPropertiesNV(
    VulkanHandleMapping* handleMapping,
    const VkExternalImageFormatPropertiesNV* input,
    goldfish_vk_proto::VkExternalImageFormatPropertiesNV* output);

void from_proto_VkExternalImageFormatPropertiesNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExternalImageFormatPropertiesNV* input,
    VkExternalImageFormatPropertiesNV* output);

#endif
#ifdef VK_NV_external_memory
void to_proto_VkExternalMemoryImageCreateInfoNV(
    VulkanHandleMapping* handleMapping,
    const VkExternalMemoryImageCreateInfoNV* input,
    goldfish_vk_proto::VkExternalMemoryImageCreateInfoNV* output);

void from_proto_VkExternalMemoryImageCreateInfoNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExternalMemoryImageCreateInfoNV* input,
    VkExternalMemoryImageCreateInfoNV* output);

void to_proto_VkExportMemoryAllocateInfoNV(
    VulkanHandleMapping* handleMapping,
    const VkExportMemoryAllocateInfoNV* input,
    goldfish_vk_proto::VkExportMemoryAllocateInfoNV* output);

void from_proto_VkExportMemoryAllocateInfoNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExportMemoryAllocateInfoNV* input,
    VkExportMemoryAllocateInfoNV* output);

#endif
#ifdef VK_NV_external_memory_win32
void to_proto_VkImportMemoryWin32HandleInfoNV(
    VulkanHandleMapping* handleMapping,
    const VkImportMemoryWin32HandleInfoNV* input,
    goldfish_vk_proto::VkImportMemoryWin32HandleInfoNV* output);

void from_proto_VkImportMemoryWin32HandleInfoNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImportMemoryWin32HandleInfoNV* input,
    VkImportMemoryWin32HandleInfoNV* output);

void to_proto_VkExportMemoryWin32HandleInfoNV(
    VulkanHandleMapping* handleMapping,
    const VkExportMemoryWin32HandleInfoNV* input,
    goldfish_vk_proto::VkExportMemoryWin32HandleInfoNV* output);

void from_proto_VkExportMemoryWin32HandleInfoNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExportMemoryWin32HandleInfoNV* input,
    VkExportMemoryWin32HandleInfoNV* output);

#endif
#ifdef VK_NV_win32_keyed_mutex
void to_proto_VkWin32KeyedMutexAcquireReleaseInfoNV(
    VulkanHandleMapping* handleMapping,
    const VkWin32KeyedMutexAcquireReleaseInfoNV* input,
    goldfish_vk_proto::VkWin32KeyedMutexAcquireReleaseInfoNV* output);

void from_proto_VkWin32KeyedMutexAcquireReleaseInfoNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkWin32KeyedMutexAcquireReleaseInfoNV* input,
    VkWin32KeyedMutexAcquireReleaseInfoNV* output);

#endif
#ifdef VK_EXT_validation_flags
void to_proto_VkValidationFlagsEXT(
    VulkanHandleMapping* handleMapping,
    const VkValidationFlagsEXT* input,
    goldfish_vk_proto::VkValidationFlagsEXT* output);

void from_proto_VkValidationFlagsEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkValidationFlagsEXT* input,
    VkValidationFlagsEXT* output);

#endif
#ifdef VK_NN_vi_surface
void to_proto_VkViSurfaceCreateInfoNN(
    VulkanHandleMapping* handleMapping,
    const VkViSurfaceCreateInfoNN* input,
    goldfish_vk_proto::VkViSurfaceCreateInfoNN* output);

void from_proto_VkViSurfaceCreateInfoNN(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkViSurfaceCreateInfoNN* input,
    VkViSurfaceCreateInfoNN* output);

#endif
#ifdef VK_EXT_shader_subgroup_ballot
#endif
#ifdef VK_EXT_shader_subgroup_vote
#endif
#ifdef VK_EXT_conditional_rendering
void to_proto_VkConditionalRenderingBeginInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkConditionalRenderingBeginInfoEXT* input,
    goldfish_vk_proto::VkConditionalRenderingBeginInfoEXT* output);

void from_proto_VkConditionalRenderingBeginInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkConditionalRenderingBeginInfoEXT* input,
    VkConditionalRenderingBeginInfoEXT* output);

void to_proto_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceConditionalRenderingFeaturesEXT* input,
    goldfish_vk_proto::VkPhysicalDeviceConditionalRenderingFeaturesEXT* output);

void from_proto_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceConditionalRenderingFeaturesEXT* input,
    VkPhysicalDeviceConditionalRenderingFeaturesEXT* output);

void to_proto_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkCommandBufferInheritanceConditionalRenderingInfoEXT* input,
    goldfish_vk_proto::VkCommandBufferInheritanceConditionalRenderingInfoEXT* output);

void from_proto_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkCommandBufferInheritanceConditionalRenderingInfoEXT* input,
    VkCommandBufferInheritanceConditionalRenderingInfoEXT* output);

#endif
#ifdef VK_NVX_device_generated_commands
void to_proto_VkDeviceGeneratedCommandsFeaturesNVX(
    VulkanHandleMapping* handleMapping,
    const VkDeviceGeneratedCommandsFeaturesNVX* input,
    goldfish_vk_proto::VkDeviceGeneratedCommandsFeaturesNVX* output);

void from_proto_VkDeviceGeneratedCommandsFeaturesNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceGeneratedCommandsFeaturesNVX* input,
    VkDeviceGeneratedCommandsFeaturesNVX* output);

void to_proto_VkDeviceGeneratedCommandsLimitsNVX(
    VulkanHandleMapping* handleMapping,
    const VkDeviceGeneratedCommandsLimitsNVX* input,
    goldfish_vk_proto::VkDeviceGeneratedCommandsLimitsNVX* output);

void from_proto_VkDeviceGeneratedCommandsLimitsNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceGeneratedCommandsLimitsNVX* input,
    VkDeviceGeneratedCommandsLimitsNVX* output);

void to_proto_VkIndirectCommandsTokenNVX(
    VulkanHandleMapping* handleMapping,
    const VkIndirectCommandsTokenNVX* input,
    goldfish_vk_proto::VkIndirectCommandsTokenNVX* output);

void from_proto_VkIndirectCommandsTokenNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkIndirectCommandsTokenNVX* input,
    VkIndirectCommandsTokenNVX* output);

void to_proto_VkIndirectCommandsLayoutTokenNVX(
    VulkanHandleMapping* handleMapping,
    const VkIndirectCommandsLayoutTokenNVX* input,
    goldfish_vk_proto::VkIndirectCommandsLayoutTokenNVX* output);

void from_proto_VkIndirectCommandsLayoutTokenNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkIndirectCommandsLayoutTokenNVX* input,
    VkIndirectCommandsLayoutTokenNVX* output);

void to_proto_VkIndirectCommandsLayoutCreateInfoNVX(
    VulkanHandleMapping* handleMapping,
    const VkIndirectCommandsLayoutCreateInfoNVX* input,
    goldfish_vk_proto::VkIndirectCommandsLayoutCreateInfoNVX* output);

void from_proto_VkIndirectCommandsLayoutCreateInfoNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkIndirectCommandsLayoutCreateInfoNVX* input,
    VkIndirectCommandsLayoutCreateInfoNVX* output);

void to_proto_VkCmdProcessCommandsInfoNVX(
    VulkanHandleMapping* handleMapping,
    const VkCmdProcessCommandsInfoNVX* input,
    goldfish_vk_proto::VkCmdProcessCommandsInfoNVX* output);

void from_proto_VkCmdProcessCommandsInfoNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkCmdProcessCommandsInfoNVX* input,
    VkCmdProcessCommandsInfoNVX* output);

void to_proto_VkCmdReserveSpaceForCommandsInfoNVX(
    VulkanHandleMapping* handleMapping,
    const VkCmdReserveSpaceForCommandsInfoNVX* input,
    goldfish_vk_proto::VkCmdReserveSpaceForCommandsInfoNVX* output);

void from_proto_VkCmdReserveSpaceForCommandsInfoNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkCmdReserveSpaceForCommandsInfoNVX* input,
    VkCmdReserveSpaceForCommandsInfoNVX* output);

void to_proto_VkObjectTableCreateInfoNVX(
    VulkanHandleMapping* handleMapping,
    const VkObjectTableCreateInfoNVX* input,
    goldfish_vk_proto::VkObjectTableCreateInfoNVX* output);

void from_proto_VkObjectTableCreateInfoNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkObjectTableCreateInfoNVX* input,
    VkObjectTableCreateInfoNVX* output);

void to_proto_VkObjectTableEntryNVX(
    VulkanHandleMapping* handleMapping,
    const VkObjectTableEntryNVX* input,
    goldfish_vk_proto::VkObjectTableEntryNVX* output);

void from_proto_VkObjectTableEntryNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkObjectTableEntryNVX* input,
    VkObjectTableEntryNVX* output);

void to_proto_VkObjectTablePipelineEntryNVX(
    VulkanHandleMapping* handleMapping,
    const VkObjectTablePipelineEntryNVX* input,
    goldfish_vk_proto::VkObjectTablePipelineEntryNVX* output);

void from_proto_VkObjectTablePipelineEntryNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkObjectTablePipelineEntryNVX* input,
    VkObjectTablePipelineEntryNVX* output);

void to_proto_VkObjectTableDescriptorSetEntryNVX(
    VulkanHandleMapping* handleMapping,
    const VkObjectTableDescriptorSetEntryNVX* input,
    goldfish_vk_proto::VkObjectTableDescriptorSetEntryNVX* output);

void from_proto_VkObjectTableDescriptorSetEntryNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkObjectTableDescriptorSetEntryNVX* input,
    VkObjectTableDescriptorSetEntryNVX* output);

void to_proto_VkObjectTableVertexBufferEntryNVX(
    VulkanHandleMapping* handleMapping,
    const VkObjectTableVertexBufferEntryNVX* input,
    goldfish_vk_proto::VkObjectTableVertexBufferEntryNVX* output);

void from_proto_VkObjectTableVertexBufferEntryNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkObjectTableVertexBufferEntryNVX* input,
    VkObjectTableVertexBufferEntryNVX* output);

void to_proto_VkObjectTableIndexBufferEntryNVX(
    VulkanHandleMapping* handleMapping,
    const VkObjectTableIndexBufferEntryNVX* input,
    goldfish_vk_proto::VkObjectTableIndexBufferEntryNVX* output);

void from_proto_VkObjectTableIndexBufferEntryNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkObjectTableIndexBufferEntryNVX* input,
    VkObjectTableIndexBufferEntryNVX* output);

void to_proto_VkObjectTablePushConstantEntryNVX(
    VulkanHandleMapping* handleMapping,
    const VkObjectTablePushConstantEntryNVX* input,
    goldfish_vk_proto::VkObjectTablePushConstantEntryNVX* output);

void from_proto_VkObjectTablePushConstantEntryNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkObjectTablePushConstantEntryNVX* input,
    VkObjectTablePushConstantEntryNVX* output);

#endif
#ifdef VK_NV_clip_space_w_scaling
void to_proto_VkViewportWScalingNV(
    VulkanHandleMapping* handleMapping,
    const VkViewportWScalingNV* input,
    goldfish_vk_proto::VkViewportWScalingNV* output);

void from_proto_VkViewportWScalingNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkViewportWScalingNV* input,
    VkViewportWScalingNV* output);

void to_proto_VkPipelineViewportWScalingStateCreateInfoNV(
    VulkanHandleMapping* handleMapping,
    const VkPipelineViewportWScalingStateCreateInfoNV* input,
    goldfish_vk_proto::VkPipelineViewportWScalingStateCreateInfoNV* output);

void from_proto_VkPipelineViewportWScalingStateCreateInfoNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineViewportWScalingStateCreateInfoNV* input,
    VkPipelineViewportWScalingStateCreateInfoNV* output);

#endif
#ifdef VK_EXT_direct_mode_display
#endif
#ifdef VK_EXT_acquire_xlib_display
#endif
#ifdef VK_EXT_display_surface_counter
void to_proto_VkSurfaceCapabilities2EXT(
    VulkanHandleMapping* handleMapping,
    const VkSurfaceCapabilities2EXT* input,
    goldfish_vk_proto::VkSurfaceCapabilities2EXT* output);

void from_proto_VkSurfaceCapabilities2EXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSurfaceCapabilities2EXT* input,
    VkSurfaceCapabilities2EXT* output);

#endif
#ifdef VK_EXT_display_control
void to_proto_VkDisplayPowerInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDisplayPowerInfoEXT* input,
    goldfish_vk_proto::VkDisplayPowerInfoEXT* output);

void from_proto_VkDisplayPowerInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayPowerInfoEXT* input,
    VkDisplayPowerInfoEXT* output);

void to_proto_VkDeviceEventInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDeviceEventInfoEXT* input,
    goldfish_vk_proto::VkDeviceEventInfoEXT* output);

void from_proto_VkDeviceEventInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceEventInfoEXT* input,
    VkDeviceEventInfoEXT* output);

void to_proto_VkDisplayEventInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDisplayEventInfoEXT* input,
    goldfish_vk_proto::VkDisplayEventInfoEXT* output);

void from_proto_VkDisplayEventInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDisplayEventInfoEXT* input,
    VkDisplayEventInfoEXT* output);

void to_proto_VkSwapchainCounterCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkSwapchainCounterCreateInfoEXT* input,
    goldfish_vk_proto::VkSwapchainCounterCreateInfoEXT* output);

void from_proto_VkSwapchainCounterCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSwapchainCounterCreateInfoEXT* input,
    VkSwapchainCounterCreateInfoEXT* output);

#endif
#ifdef VK_GOOGLE_display_timing
void to_proto_VkRefreshCycleDurationGOOGLE(
    VulkanHandleMapping* handleMapping,
    const VkRefreshCycleDurationGOOGLE* input,
    goldfish_vk_proto::VkRefreshCycleDurationGOOGLE* output);

void from_proto_VkRefreshCycleDurationGOOGLE(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkRefreshCycleDurationGOOGLE* input,
    VkRefreshCycleDurationGOOGLE* output);

void to_proto_VkPastPresentationTimingGOOGLE(
    VulkanHandleMapping* handleMapping,
    const VkPastPresentationTimingGOOGLE* input,
    goldfish_vk_proto::VkPastPresentationTimingGOOGLE* output);

void from_proto_VkPastPresentationTimingGOOGLE(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPastPresentationTimingGOOGLE* input,
    VkPastPresentationTimingGOOGLE* output);

void to_proto_VkPresentTimeGOOGLE(
    VulkanHandleMapping* handleMapping,
    const VkPresentTimeGOOGLE* input,
    goldfish_vk_proto::VkPresentTimeGOOGLE* output);

void from_proto_VkPresentTimeGOOGLE(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPresentTimeGOOGLE* input,
    VkPresentTimeGOOGLE* output);

void to_proto_VkPresentTimesInfoGOOGLE(
    VulkanHandleMapping* handleMapping,
    const VkPresentTimesInfoGOOGLE* input,
    goldfish_vk_proto::VkPresentTimesInfoGOOGLE* output);

void from_proto_VkPresentTimesInfoGOOGLE(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPresentTimesInfoGOOGLE* input,
    VkPresentTimesInfoGOOGLE* output);

#endif
#ifdef VK_NV_sample_mask_override_coverage
#endif
#ifdef VK_NV_geometry_shader_passthrough
#endif
#ifdef VK_NV_viewport_array2
#endif
#ifdef VK_NVX_multiview_per_view_attributes
void to_proto_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* input,
    goldfish_vk_proto::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* output);

void from_proto_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* input,
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* output);

#endif
#ifdef VK_NV_viewport_swizzle
void to_proto_VkViewportSwizzleNV(
    VulkanHandleMapping* handleMapping,
    const VkViewportSwizzleNV* input,
    goldfish_vk_proto::VkViewportSwizzleNV* output);

void from_proto_VkViewportSwizzleNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkViewportSwizzleNV* input,
    VkViewportSwizzleNV* output);

void to_proto_VkPipelineViewportSwizzleStateCreateInfoNV(
    VulkanHandleMapping* handleMapping,
    const VkPipelineViewportSwizzleStateCreateInfoNV* input,
    goldfish_vk_proto::VkPipelineViewportSwizzleStateCreateInfoNV* output);

void from_proto_VkPipelineViewportSwizzleStateCreateInfoNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineViewportSwizzleStateCreateInfoNV* input,
    VkPipelineViewportSwizzleStateCreateInfoNV* output);

#endif
#ifdef VK_EXT_discard_rectangles
void to_proto_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceDiscardRectanglePropertiesEXT* input,
    goldfish_vk_proto::VkPhysicalDeviceDiscardRectanglePropertiesEXT* output);

void from_proto_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceDiscardRectanglePropertiesEXT* input,
    VkPhysicalDeviceDiscardRectanglePropertiesEXT* output);

void to_proto_VkPipelineDiscardRectangleStateCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkPipelineDiscardRectangleStateCreateInfoEXT* input,
    goldfish_vk_proto::VkPipelineDiscardRectangleStateCreateInfoEXT* output);

void from_proto_VkPipelineDiscardRectangleStateCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineDiscardRectangleStateCreateInfoEXT* input,
    VkPipelineDiscardRectangleStateCreateInfoEXT* output);

#endif
#ifdef VK_EXT_conservative_rasterization
void to_proto_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceConservativeRasterizationPropertiesEXT* input,
    goldfish_vk_proto::VkPhysicalDeviceConservativeRasterizationPropertiesEXT* output);

void from_proto_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceConservativeRasterizationPropertiesEXT* input,
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT* output);

void to_proto_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkPipelineRasterizationConservativeStateCreateInfoEXT* input,
    goldfish_vk_proto::VkPipelineRasterizationConservativeStateCreateInfoEXT* output);

void from_proto_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineRasterizationConservativeStateCreateInfoEXT* input,
    VkPipelineRasterizationConservativeStateCreateInfoEXT* output);

#endif
#ifdef VK_EXT_swapchain_colorspace
#endif
#ifdef VK_EXT_hdr_metadata
void to_proto_VkXYColorEXT(
    VulkanHandleMapping* handleMapping,
    const VkXYColorEXT* input,
    goldfish_vk_proto::VkXYColorEXT* output);

void from_proto_VkXYColorEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkXYColorEXT* input,
    VkXYColorEXT* output);

void to_proto_VkHdrMetadataEXT(
    VulkanHandleMapping* handleMapping,
    const VkHdrMetadataEXT* input,
    goldfish_vk_proto::VkHdrMetadataEXT* output);

void from_proto_VkHdrMetadataEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkHdrMetadataEXT* input,
    VkHdrMetadataEXT* output);

#endif
#ifdef VK_MVK_ios_surface
void to_proto_VkIOSSurfaceCreateInfoMVK(
    VulkanHandleMapping* handleMapping,
    const VkIOSSurfaceCreateInfoMVK* input,
    goldfish_vk_proto::VkIOSSurfaceCreateInfoMVK* output);

void from_proto_VkIOSSurfaceCreateInfoMVK(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkIOSSurfaceCreateInfoMVK* input,
    VkIOSSurfaceCreateInfoMVK* output);

#endif
#ifdef VK_MVK_macos_surface
void to_proto_VkMacOSSurfaceCreateInfoMVK(
    VulkanHandleMapping* handleMapping,
    const VkMacOSSurfaceCreateInfoMVK* input,
    goldfish_vk_proto::VkMacOSSurfaceCreateInfoMVK* output);

void from_proto_VkMacOSSurfaceCreateInfoMVK(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMacOSSurfaceCreateInfoMVK* input,
    VkMacOSSurfaceCreateInfoMVK* output);

#endif
#ifdef VK_EXT_external_memory_dma_buf
#endif
#ifdef VK_EXT_queue_family_foreign
#endif
#ifdef VK_EXT_debug_utils
void to_proto_VkDebugUtilsObjectNameInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDebugUtilsObjectNameInfoEXT* input,
    goldfish_vk_proto::VkDebugUtilsObjectNameInfoEXT* output);

void from_proto_VkDebugUtilsObjectNameInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDebugUtilsObjectNameInfoEXT* input,
    VkDebugUtilsObjectNameInfoEXT* output);

void to_proto_VkDebugUtilsObjectTagInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDebugUtilsObjectTagInfoEXT* input,
    goldfish_vk_proto::VkDebugUtilsObjectTagInfoEXT* output);

void from_proto_VkDebugUtilsObjectTagInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDebugUtilsObjectTagInfoEXT* input,
    VkDebugUtilsObjectTagInfoEXT* output);

void to_proto_VkDebugUtilsLabelEXT(
    VulkanHandleMapping* handleMapping,
    const VkDebugUtilsLabelEXT* input,
    goldfish_vk_proto::VkDebugUtilsLabelEXT* output);

void from_proto_VkDebugUtilsLabelEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDebugUtilsLabelEXT* input,
    VkDebugUtilsLabelEXT* output);

void to_proto_VkDebugUtilsMessengerCallbackDataEXT(
    VulkanHandleMapping* handleMapping,
    const VkDebugUtilsMessengerCallbackDataEXT* input,
    goldfish_vk_proto::VkDebugUtilsMessengerCallbackDataEXT* output);

void from_proto_VkDebugUtilsMessengerCallbackDataEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDebugUtilsMessengerCallbackDataEXT* input,
    VkDebugUtilsMessengerCallbackDataEXT* output);

void to_proto_VkDebugUtilsMessengerCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDebugUtilsMessengerCreateInfoEXT* input,
    goldfish_vk_proto::VkDebugUtilsMessengerCreateInfoEXT* output);

void from_proto_VkDebugUtilsMessengerCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDebugUtilsMessengerCreateInfoEXT* input,
    VkDebugUtilsMessengerCreateInfoEXT* output);

#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
void to_proto_VkAndroidHardwareBufferUsageANDROID(
    VulkanHandleMapping* handleMapping,
    const VkAndroidHardwareBufferUsageANDROID* input,
    goldfish_vk_proto::VkAndroidHardwareBufferUsageANDROID* output);

void from_proto_VkAndroidHardwareBufferUsageANDROID(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkAndroidHardwareBufferUsageANDROID* input,
    VkAndroidHardwareBufferUsageANDROID* output);

void to_proto_VkAndroidHardwareBufferPropertiesANDROID(
    VulkanHandleMapping* handleMapping,
    const VkAndroidHardwareBufferPropertiesANDROID* input,
    goldfish_vk_proto::VkAndroidHardwareBufferPropertiesANDROID* output);

void from_proto_VkAndroidHardwareBufferPropertiesANDROID(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkAndroidHardwareBufferPropertiesANDROID* input,
    VkAndroidHardwareBufferPropertiesANDROID* output);

void to_proto_VkAndroidHardwareBufferFormatPropertiesANDROID(
    VulkanHandleMapping* handleMapping,
    const VkAndroidHardwareBufferFormatPropertiesANDROID* input,
    goldfish_vk_proto::VkAndroidHardwareBufferFormatPropertiesANDROID* output);

void from_proto_VkAndroidHardwareBufferFormatPropertiesANDROID(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkAndroidHardwareBufferFormatPropertiesANDROID* input,
    VkAndroidHardwareBufferFormatPropertiesANDROID* output);

void to_proto_VkImportAndroidHardwareBufferInfoANDROID(
    VulkanHandleMapping* handleMapping,
    const VkImportAndroidHardwareBufferInfoANDROID* input,
    goldfish_vk_proto::VkImportAndroidHardwareBufferInfoANDROID* output);

void from_proto_VkImportAndroidHardwareBufferInfoANDROID(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImportAndroidHardwareBufferInfoANDROID* input,
    VkImportAndroidHardwareBufferInfoANDROID* output);

void to_proto_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    VulkanHandleMapping* handleMapping,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* input,
    goldfish_vk_proto::VkMemoryGetAndroidHardwareBufferInfoANDROID* output);

void from_proto_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryGetAndroidHardwareBufferInfoANDROID* input,
    VkMemoryGetAndroidHardwareBufferInfoANDROID* output);

void to_proto_VkExternalFormatANDROID(
    VulkanHandleMapping* handleMapping,
    const VkExternalFormatANDROID* input,
    goldfish_vk_proto::VkExternalFormatANDROID* output);

void from_proto_VkExternalFormatANDROID(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkExternalFormatANDROID* input,
    VkExternalFormatANDROID* output);

#endif
#ifdef VK_EXT_sampler_filter_minmax
void to_proto_VkSamplerReductionModeCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkSamplerReductionModeCreateInfoEXT* input,
    goldfish_vk_proto::VkSamplerReductionModeCreateInfoEXT* output);

void from_proto_VkSamplerReductionModeCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSamplerReductionModeCreateInfoEXT* input,
    VkSamplerReductionModeCreateInfoEXT* output);

void to_proto_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* input,
    goldfish_vk_proto::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* output);

void from_proto_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* input,
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* output);

#endif
#ifdef VK_AMD_gpu_shader_int16
#endif
#ifdef VK_AMD_mixed_attachment_samples
#endif
#ifdef VK_AMD_shader_fragment_mask
#endif
#ifdef VK_EXT_shader_stencil_export
#endif
#ifdef VK_EXT_sample_locations
void to_proto_VkSampleLocationEXT(
    VulkanHandleMapping* handleMapping,
    const VkSampleLocationEXT* input,
    goldfish_vk_proto::VkSampleLocationEXT* output);

void from_proto_VkSampleLocationEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSampleLocationEXT* input,
    VkSampleLocationEXT* output);

void to_proto_VkSampleLocationsInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkSampleLocationsInfoEXT* input,
    goldfish_vk_proto::VkSampleLocationsInfoEXT* output);

void from_proto_VkSampleLocationsInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSampleLocationsInfoEXT* input,
    VkSampleLocationsInfoEXT* output);

void to_proto_VkAttachmentSampleLocationsEXT(
    VulkanHandleMapping* handleMapping,
    const VkAttachmentSampleLocationsEXT* input,
    goldfish_vk_proto::VkAttachmentSampleLocationsEXT* output);

void from_proto_VkAttachmentSampleLocationsEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkAttachmentSampleLocationsEXT* input,
    VkAttachmentSampleLocationsEXT* output);

void to_proto_VkSubpassSampleLocationsEXT(
    VulkanHandleMapping* handleMapping,
    const VkSubpassSampleLocationsEXT* input,
    goldfish_vk_proto::VkSubpassSampleLocationsEXT* output);

void from_proto_VkSubpassSampleLocationsEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkSubpassSampleLocationsEXT* input,
    VkSubpassSampleLocationsEXT* output);

void to_proto_VkRenderPassSampleLocationsBeginInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkRenderPassSampleLocationsBeginInfoEXT* input,
    goldfish_vk_proto::VkRenderPassSampleLocationsBeginInfoEXT* output);

void from_proto_VkRenderPassSampleLocationsBeginInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkRenderPassSampleLocationsBeginInfoEXT* input,
    VkRenderPassSampleLocationsBeginInfoEXT* output);

void to_proto_VkPipelineSampleLocationsStateCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkPipelineSampleLocationsStateCreateInfoEXT* input,
    goldfish_vk_proto::VkPipelineSampleLocationsStateCreateInfoEXT* output);

void from_proto_VkPipelineSampleLocationsStateCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineSampleLocationsStateCreateInfoEXT* input,
    VkPipelineSampleLocationsStateCreateInfoEXT* output);

void to_proto_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceSampleLocationsPropertiesEXT* input,
    goldfish_vk_proto::VkPhysicalDeviceSampleLocationsPropertiesEXT* output);

void from_proto_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceSampleLocationsPropertiesEXT* input,
    VkPhysicalDeviceSampleLocationsPropertiesEXT* output);

void to_proto_VkMultisamplePropertiesEXT(
    VulkanHandleMapping* handleMapping,
    const VkMultisamplePropertiesEXT* input,
    goldfish_vk_proto::VkMultisamplePropertiesEXT* output);

void from_proto_VkMultisamplePropertiesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMultisamplePropertiesEXT* input,
    VkMultisamplePropertiesEXT* output);

#endif
#ifdef VK_EXT_blend_operation_advanced
void to_proto_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* input,
    goldfish_vk_proto::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* output);

void from_proto_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* input,
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* output);

void to_proto_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* input,
    goldfish_vk_proto::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* output);

void from_proto_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* input,
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* output);

void to_proto_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkPipelineColorBlendAdvancedStateCreateInfoEXT* input,
    goldfish_vk_proto::VkPipelineColorBlendAdvancedStateCreateInfoEXT* output);

void from_proto_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineColorBlendAdvancedStateCreateInfoEXT* input,
    VkPipelineColorBlendAdvancedStateCreateInfoEXT* output);

#endif
#ifdef VK_NV_fragment_coverage_to_color
void to_proto_VkPipelineCoverageToColorStateCreateInfoNV(
    VulkanHandleMapping* handleMapping,
    const VkPipelineCoverageToColorStateCreateInfoNV* input,
    goldfish_vk_proto::VkPipelineCoverageToColorStateCreateInfoNV* output);

void from_proto_VkPipelineCoverageToColorStateCreateInfoNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineCoverageToColorStateCreateInfoNV* input,
    VkPipelineCoverageToColorStateCreateInfoNV* output);

#endif
#ifdef VK_NV_framebuffer_mixed_samples
void to_proto_VkPipelineCoverageModulationStateCreateInfoNV(
    VulkanHandleMapping* handleMapping,
    const VkPipelineCoverageModulationStateCreateInfoNV* input,
    goldfish_vk_proto::VkPipelineCoverageModulationStateCreateInfoNV* output);

void from_proto_VkPipelineCoverageModulationStateCreateInfoNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineCoverageModulationStateCreateInfoNV* input,
    VkPipelineCoverageModulationStateCreateInfoNV* output);

#endif
#ifdef VK_NV_fill_rectangle
#endif
#ifdef VK_EXT_post_depth_coverage
#endif
#ifdef VK_EXT_validation_cache
void to_proto_VkValidationCacheCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkValidationCacheCreateInfoEXT* input,
    goldfish_vk_proto::VkValidationCacheCreateInfoEXT* output);

void from_proto_VkValidationCacheCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkValidationCacheCreateInfoEXT* input,
    VkValidationCacheCreateInfoEXT* output);

void to_proto_VkShaderModuleValidationCacheCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkShaderModuleValidationCacheCreateInfoEXT* input,
    goldfish_vk_proto::VkShaderModuleValidationCacheCreateInfoEXT* output);

void from_proto_VkShaderModuleValidationCacheCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkShaderModuleValidationCacheCreateInfoEXT* input,
    VkShaderModuleValidationCacheCreateInfoEXT* output);

#endif
#ifdef VK_EXT_descriptor_indexing
void to_proto_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* input,
    goldfish_vk_proto::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* output);

void from_proto_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* input,
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* output);

void to_proto_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceDescriptorIndexingFeaturesEXT* input,
    goldfish_vk_proto::VkPhysicalDeviceDescriptorIndexingFeaturesEXT* output);

void from_proto_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceDescriptorIndexingFeaturesEXT* input,
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT* output);

void to_proto_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceDescriptorIndexingPropertiesEXT* input,
    goldfish_vk_proto::VkPhysicalDeviceDescriptorIndexingPropertiesEXT* output);

void from_proto_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceDescriptorIndexingPropertiesEXT* input,
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT* output);

void to_proto_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* input,
    goldfish_vk_proto::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* output);

void from_proto_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* input,
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* output);

void to_proto_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VulkanHandleMapping* handleMapping,
    const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* input,
    goldfish_vk_proto::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* output);

void from_proto_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* input,
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* output);

#endif
#ifdef VK_EXT_shader_viewport_index_layer
#endif
#ifdef VK_EXT_global_priority
void to_proto_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkDeviceQueueGlobalPriorityCreateInfoEXT* input,
    goldfish_vk_proto::VkDeviceQueueGlobalPriorityCreateInfoEXT* output);

void from_proto_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkDeviceQueueGlobalPriorityCreateInfoEXT* input,
    VkDeviceQueueGlobalPriorityCreateInfoEXT* output);

#endif
#ifdef VK_EXT_external_memory_host
void to_proto_VkImportMemoryHostPointerInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkImportMemoryHostPointerInfoEXT* input,
    goldfish_vk_proto::VkImportMemoryHostPointerInfoEXT* output);

void from_proto_VkImportMemoryHostPointerInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImportMemoryHostPointerInfoEXT* input,
    VkImportMemoryHostPointerInfoEXT* output);

void to_proto_VkMemoryHostPointerPropertiesEXT(
    VulkanHandleMapping* handleMapping,
    const VkMemoryHostPointerPropertiesEXT* input,
    goldfish_vk_proto::VkMemoryHostPointerPropertiesEXT* output);

void from_proto_VkMemoryHostPointerPropertiesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkMemoryHostPointerPropertiesEXT* input,
    VkMemoryHostPointerPropertiesEXT* output);

void to_proto_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceExternalMemoryHostPropertiesEXT* input,
    goldfish_vk_proto::VkPhysicalDeviceExternalMemoryHostPropertiesEXT* output);

void from_proto_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceExternalMemoryHostPropertiesEXT* input,
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT* output);

#endif
#ifdef VK_AMD_buffer_marker
#endif
#ifdef VK_AMD_shader_core_properties
void to_proto_VkPhysicalDeviceShaderCorePropertiesAMD(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceShaderCorePropertiesAMD* input,
    goldfish_vk_proto::VkPhysicalDeviceShaderCorePropertiesAMD* output);

void from_proto_VkPhysicalDeviceShaderCorePropertiesAMD(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceShaderCorePropertiesAMD* input,
    VkPhysicalDeviceShaderCorePropertiesAMD* output);

#endif
#ifdef VK_EXT_vertex_attribute_divisor
void to_proto_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VulkanHandleMapping* handleMapping,
    const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* input,
    goldfish_vk_proto::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* output);

void from_proto_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* input,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* output);

void to_proto_VkVertexInputBindingDivisorDescriptionEXT(
    VulkanHandleMapping* handleMapping,
    const VkVertexInputBindingDivisorDescriptionEXT* input,
    goldfish_vk_proto::VkVertexInputBindingDivisorDescriptionEXT* output);

void from_proto_VkVertexInputBindingDivisorDescriptionEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkVertexInputBindingDivisorDescriptionEXT* input,
    VkVertexInputBindingDivisorDescriptionEXT* output);

void to_proto_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VulkanHandleMapping* handleMapping,
    const VkPipelineVertexInputDivisorStateCreateInfoEXT* input,
    goldfish_vk_proto::VkPipelineVertexInputDivisorStateCreateInfoEXT* output);

void from_proto_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkPipelineVertexInputDivisorStateCreateInfoEXT* input,
    VkPipelineVertexInputDivisorStateCreateInfoEXT* output);

#endif
#ifdef VK_NV_shader_subgroup_partitioned
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
void to_proto_VkQueueFamilyCheckpointPropertiesNV(
    VulkanHandleMapping* handleMapping,
    const VkQueueFamilyCheckpointPropertiesNV* input,
    goldfish_vk_proto::VkQueueFamilyCheckpointPropertiesNV* output);

void from_proto_VkQueueFamilyCheckpointPropertiesNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkQueueFamilyCheckpointPropertiesNV* input,
    VkQueueFamilyCheckpointPropertiesNV* output);

void to_proto_VkCheckpointDataNV(
    VulkanHandleMapping* handleMapping,
    const VkCheckpointDataNV* input,
    goldfish_vk_proto::VkCheckpointDataNV* output);

void from_proto_VkCheckpointDataNV(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkCheckpointDataNV* input,
    VkCheckpointDataNV* output);

#endif
#ifdef VK_GOOGLE_address_space
#endif
#ifdef VK_GOOGLE_color_buffer
void to_proto_VkImportColorBufferGOOGLE(
    VulkanHandleMapping* handleMapping,
    const VkImportColorBufferGOOGLE* input,
    goldfish_vk_proto::VkImportColorBufferGOOGLE* output);

void from_proto_VkImportColorBufferGOOGLE(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImportColorBufferGOOGLE* input,
    VkImportColorBufferGOOGLE* output);

void to_proto_VkImportPhysicalAddressGOOGLE(
    VulkanHandleMapping* handleMapping,
    const VkImportPhysicalAddressGOOGLE* input,
    goldfish_vk_proto::VkImportPhysicalAddressGOOGLE* output);

void from_proto_VkImportPhysicalAddressGOOGLE(
    Pool* pool,
    VulkanHandleMapping* handleMapping,
    goldfish_vk_proto::VkImportPhysicalAddressGOOGLE* input,
    VkImportPhysicalAddressGOOGLE* output);

#endif
#ifdef VK_GOOGLE_sized_descriptor_update_template
#endif
#ifdef VK_GOOGLE_async_command_buffers
#endif
#ifdef VK_GOOGLE_create_resources_with_requirements
#endif

} // namespace goldfish_vk
