// Copyright (C) 2018 The Android Open Source Project
// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated module goldfish_vk_testing
// (header) generated by protocols/vulkan/xml/genvk.py -registry protocols/vulkan/xml/vk.xml cereal -o stream-servers/vulkan/cereal
// Please do not modify directly;
// re-run generate-vulkan-sources.sh,
// or directly from Python by defining:
// VULKAN_REGISTRY_XML_DIR : Directory containing genvk.py and vk.xml
// CEREAL_OUTPUT_DIR: Where to put the generated sources.
// python3 $VULKAN_REGISTRY_XML_DIR/genvk.py -registry $VULKAN_REGISTRY_XML_DIR/vk.xml cereal -o $CEREAL_OUTPUT_DIR

#pragma once

#include <vulkan/vulkan.h>


#include "goldfish_vk_private_defs.h"
#include <string.h>
#include <functional>
using OnFailCompareFunc = std::function<void(const char*)>;


namespace goldfish_vk {

#ifdef VK_VERSION_1_0
void checkEqual_VkApplicationInfo(
    const VkApplicationInfo* a,
    const VkApplicationInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkInstanceCreateInfo(
    const VkInstanceCreateInfo* a,
    const VkInstanceCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkAllocationCallbacks(
    const VkAllocationCallbacks* a,
    const VkAllocationCallbacks* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceFeatures(
    const VkPhysicalDeviceFeatures* a,
    const VkPhysicalDeviceFeatures* b,
    OnFailCompareFunc onFail);

void checkEqual_VkFormatProperties(
    const VkFormatProperties* a,
    const VkFormatProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExtent3D(
    const VkExtent3D* a,
    const VkExtent3D* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageFormatProperties(
    const VkImageFormatProperties* a,
    const VkImageFormatProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceLimits(
    const VkPhysicalDeviceLimits* a,
    const VkPhysicalDeviceLimits* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceSparseProperties(
    const VkPhysicalDeviceSparseProperties* a,
    const VkPhysicalDeviceSparseProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceProperties(
    const VkPhysicalDeviceProperties* a,
    const VkPhysicalDeviceProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkQueueFamilyProperties(
    const VkQueueFamilyProperties* a,
    const VkQueueFamilyProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryType(
    const VkMemoryType* a,
    const VkMemoryType* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryHeap(
    const VkMemoryHeap* a,
    const VkMemoryHeap* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceMemoryProperties(
    const VkPhysicalDeviceMemoryProperties* a,
    const VkPhysicalDeviceMemoryProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceQueueCreateInfo(
    const VkDeviceQueueCreateInfo* a,
    const VkDeviceQueueCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceCreateInfo(
    const VkDeviceCreateInfo* a,
    const VkDeviceCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExtensionProperties(
    const VkExtensionProperties* a,
    const VkExtensionProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkLayerProperties(
    const VkLayerProperties* a,
    const VkLayerProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSubmitInfo(
    const VkSubmitInfo* a,
    const VkSubmitInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryAllocateInfo(
    const VkMemoryAllocateInfo* a,
    const VkMemoryAllocateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMappedMemoryRange(
    const VkMappedMemoryRange* a,
    const VkMappedMemoryRange* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryRequirements(
    const VkMemoryRequirements* a,
    const VkMemoryRequirements* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSparseImageFormatProperties(
    const VkSparseImageFormatProperties* a,
    const VkSparseImageFormatProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSparseImageMemoryRequirements(
    const VkSparseImageMemoryRequirements* a,
    const VkSparseImageMemoryRequirements* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSparseMemoryBind(
    const VkSparseMemoryBind* a,
    const VkSparseMemoryBind* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSparseBufferMemoryBindInfo(
    const VkSparseBufferMemoryBindInfo* a,
    const VkSparseBufferMemoryBindInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSparseImageOpaqueMemoryBindInfo(
    const VkSparseImageOpaqueMemoryBindInfo* a,
    const VkSparseImageOpaqueMemoryBindInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageSubresource(
    const VkImageSubresource* a,
    const VkImageSubresource* b,
    OnFailCompareFunc onFail);

void checkEqual_VkOffset3D(
    const VkOffset3D* a,
    const VkOffset3D* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSparseImageMemoryBind(
    const VkSparseImageMemoryBind* a,
    const VkSparseImageMemoryBind* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSparseImageMemoryBindInfo(
    const VkSparseImageMemoryBindInfo* a,
    const VkSparseImageMemoryBindInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBindSparseInfo(
    const VkBindSparseInfo* a,
    const VkBindSparseInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkFenceCreateInfo(
    const VkFenceCreateInfo* a,
    const VkFenceCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSemaphoreCreateInfo(
    const VkSemaphoreCreateInfo* a,
    const VkSemaphoreCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkEventCreateInfo(
    const VkEventCreateInfo* a,
    const VkEventCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkQueryPoolCreateInfo(
    const VkQueryPoolCreateInfo* a,
    const VkQueryPoolCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBufferCreateInfo(
    const VkBufferCreateInfo* a,
    const VkBufferCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBufferViewCreateInfo(
    const VkBufferViewCreateInfo* a,
    const VkBufferViewCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageCreateInfo(
    const VkImageCreateInfo* a,
    const VkImageCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSubresourceLayout(
    const VkSubresourceLayout* a,
    const VkSubresourceLayout* b,
    OnFailCompareFunc onFail);

void checkEqual_VkComponentMapping(
    const VkComponentMapping* a,
    const VkComponentMapping* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageSubresourceRange(
    const VkImageSubresourceRange* a,
    const VkImageSubresourceRange* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageViewCreateInfo(
    const VkImageViewCreateInfo* a,
    const VkImageViewCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkShaderModuleCreateInfo(
    const VkShaderModuleCreateInfo* a,
    const VkShaderModuleCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineCacheCreateInfo(
    const VkPipelineCacheCreateInfo* a,
    const VkPipelineCacheCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSpecializationMapEntry(
    const VkSpecializationMapEntry* a,
    const VkSpecializationMapEntry* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSpecializationInfo(
    const VkSpecializationInfo* a,
    const VkSpecializationInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineShaderStageCreateInfo(
    const VkPipelineShaderStageCreateInfo* a,
    const VkPipelineShaderStageCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkVertexInputBindingDescription(
    const VkVertexInputBindingDescription* a,
    const VkVertexInputBindingDescription* b,
    OnFailCompareFunc onFail);

void checkEqual_VkVertexInputAttributeDescription(
    const VkVertexInputAttributeDescription* a,
    const VkVertexInputAttributeDescription* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineVertexInputStateCreateInfo(
    const VkPipelineVertexInputStateCreateInfo* a,
    const VkPipelineVertexInputStateCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineInputAssemblyStateCreateInfo(
    const VkPipelineInputAssemblyStateCreateInfo* a,
    const VkPipelineInputAssemblyStateCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineTessellationStateCreateInfo(
    const VkPipelineTessellationStateCreateInfo* a,
    const VkPipelineTessellationStateCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkViewport(
    const VkViewport* a,
    const VkViewport* b,
    OnFailCompareFunc onFail);

void checkEqual_VkOffset2D(
    const VkOffset2D* a,
    const VkOffset2D* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExtent2D(
    const VkExtent2D* a,
    const VkExtent2D* b,
    OnFailCompareFunc onFail);

void checkEqual_VkRect2D(
    const VkRect2D* a,
    const VkRect2D* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineViewportStateCreateInfo(
    const VkPipelineViewportStateCreateInfo* a,
    const VkPipelineViewportStateCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineRasterizationStateCreateInfo(
    const VkPipelineRasterizationStateCreateInfo* a,
    const VkPipelineRasterizationStateCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineMultisampleStateCreateInfo(
    const VkPipelineMultisampleStateCreateInfo* a,
    const VkPipelineMultisampleStateCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkStencilOpState(
    const VkStencilOpState* a,
    const VkStencilOpState* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineDepthStencilStateCreateInfo(
    const VkPipelineDepthStencilStateCreateInfo* a,
    const VkPipelineDepthStencilStateCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineColorBlendAttachmentState(
    const VkPipelineColorBlendAttachmentState* a,
    const VkPipelineColorBlendAttachmentState* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineColorBlendStateCreateInfo(
    const VkPipelineColorBlendStateCreateInfo* a,
    const VkPipelineColorBlendStateCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineDynamicStateCreateInfo(
    const VkPipelineDynamicStateCreateInfo* a,
    const VkPipelineDynamicStateCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkGraphicsPipelineCreateInfo(
    const VkGraphicsPipelineCreateInfo* a,
    const VkGraphicsPipelineCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkComputePipelineCreateInfo(
    const VkComputePipelineCreateInfo* a,
    const VkComputePipelineCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPushConstantRange(
    const VkPushConstantRange* a,
    const VkPushConstantRange* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineLayoutCreateInfo(
    const VkPipelineLayoutCreateInfo* a,
    const VkPipelineLayoutCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSamplerCreateInfo(
    const VkSamplerCreateInfo* a,
    const VkSamplerCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDescriptorSetLayoutBinding(
    const VkDescriptorSetLayoutBinding* a,
    const VkDescriptorSetLayoutBinding* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDescriptorSetLayoutCreateInfo(
    const VkDescriptorSetLayoutCreateInfo* a,
    const VkDescriptorSetLayoutCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDescriptorPoolSize(
    const VkDescriptorPoolSize* a,
    const VkDescriptorPoolSize* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDescriptorPoolCreateInfo(
    const VkDescriptorPoolCreateInfo* a,
    const VkDescriptorPoolCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDescriptorSetAllocateInfo(
    const VkDescriptorSetAllocateInfo* a,
    const VkDescriptorSetAllocateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDescriptorImageInfo(
    const VkDescriptorImageInfo* a,
    const VkDescriptorImageInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDescriptorBufferInfo(
    const VkDescriptorBufferInfo* a,
    const VkDescriptorBufferInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkWriteDescriptorSet(
    const VkWriteDescriptorSet* a,
    const VkWriteDescriptorSet* b,
    OnFailCompareFunc onFail);

void checkEqual_VkCopyDescriptorSet(
    const VkCopyDescriptorSet* a,
    const VkCopyDescriptorSet* b,
    OnFailCompareFunc onFail);

void checkEqual_VkFramebufferCreateInfo(
    const VkFramebufferCreateInfo* a,
    const VkFramebufferCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkAttachmentDescription(
    const VkAttachmentDescription* a,
    const VkAttachmentDescription* b,
    OnFailCompareFunc onFail);

void checkEqual_VkAttachmentReference(
    const VkAttachmentReference* a,
    const VkAttachmentReference* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSubpassDescription(
    const VkSubpassDescription* a,
    const VkSubpassDescription* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSubpassDependency(
    const VkSubpassDependency* a,
    const VkSubpassDependency* b,
    OnFailCompareFunc onFail);

void checkEqual_VkRenderPassCreateInfo(
    const VkRenderPassCreateInfo* a,
    const VkRenderPassCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkCommandPoolCreateInfo(
    const VkCommandPoolCreateInfo* a,
    const VkCommandPoolCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkCommandBufferAllocateInfo(
    const VkCommandBufferAllocateInfo* a,
    const VkCommandBufferAllocateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkCommandBufferInheritanceInfo(
    const VkCommandBufferInheritanceInfo* a,
    const VkCommandBufferInheritanceInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkCommandBufferBeginInfo(
    const VkCommandBufferBeginInfo* a,
    const VkCommandBufferBeginInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBufferCopy(
    const VkBufferCopy* a,
    const VkBufferCopy* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageSubresourceLayers(
    const VkImageSubresourceLayers* a,
    const VkImageSubresourceLayers* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageCopy(
    const VkImageCopy* a,
    const VkImageCopy* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageBlit(
    const VkImageBlit* a,
    const VkImageBlit* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBufferImageCopy(
    const VkBufferImageCopy* a,
    const VkBufferImageCopy* b,
    OnFailCompareFunc onFail);

void checkEqual_VkClearColorValue(
    const VkClearColorValue* a,
    const VkClearColorValue* b,
    OnFailCompareFunc onFail);

void checkEqual_VkClearDepthStencilValue(
    const VkClearDepthStencilValue* a,
    const VkClearDepthStencilValue* b,
    OnFailCompareFunc onFail);

void checkEqual_VkClearValue(
    const VkClearValue* a,
    const VkClearValue* b,
    OnFailCompareFunc onFail);

void checkEqual_VkClearAttachment(
    const VkClearAttachment* a,
    const VkClearAttachment* b,
    OnFailCompareFunc onFail);

void checkEqual_VkClearRect(
    const VkClearRect* a,
    const VkClearRect* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageResolve(
    const VkImageResolve* a,
    const VkImageResolve* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryBarrier(
    const VkMemoryBarrier* a,
    const VkMemoryBarrier* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBufferMemoryBarrier(
    const VkBufferMemoryBarrier* a,
    const VkBufferMemoryBarrier* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageMemoryBarrier(
    const VkImageMemoryBarrier* a,
    const VkImageMemoryBarrier* b,
    OnFailCompareFunc onFail);

void checkEqual_VkRenderPassBeginInfo(
    const VkRenderPassBeginInfo* a,
    const VkRenderPassBeginInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDispatchIndirectCommand(
    const VkDispatchIndirectCommand* a,
    const VkDispatchIndirectCommand* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDrawIndexedIndirectCommand(
    const VkDrawIndexedIndirectCommand* a,
    const VkDrawIndexedIndirectCommand* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDrawIndirectCommand(
    const VkDrawIndirectCommand* a,
    const VkDrawIndirectCommand* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBaseOutStructure(
    const VkBaseOutStructure* a,
    const VkBaseOutStructure* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBaseInStructure(
    const VkBaseInStructure* a,
    const VkBaseInStructure* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_VERSION_1_1
void checkEqual_VkPhysicalDeviceSubgroupProperties(
    const VkPhysicalDeviceSubgroupProperties* a,
    const VkPhysicalDeviceSubgroupProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBindBufferMemoryInfo(
    const VkBindBufferMemoryInfo* a,
    const VkBindBufferMemoryInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBindImageMemoryInfo(
    const VkBindImageMemoryInfo* a,
    const VkBindImageMemoryInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDevice16BitStorageFeatures(
    const VkPhysicalDevice16BitStorageFeatures* a,
    const VkPhysicalDevice16BitStorageFeatures* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryDedicatedRequirements(
    const VkMemoryDedicatedRequirements* a,
    const VkMemoryDedicatedRequirements* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryDedicatedAllocateInfo(
    const VkMemoryDedicatedAllocateInfo* a,
    const VkMemoryDedicatedAllocateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryAllocateFlagsInfo(
    const VkMemoryAllocateFlagsInfo* a,
    const VkMemoryAllocateFlagsInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceGroupRenderPassBeginInfo(
    const VkDeviceGroupRenderPassBeginInfo* a,
    const VkDeviceGroupRenderPassBeginInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceGroupCommandBufferBeginInfo(
    const VkDeviceGroupCommandBufferBeginInfo* a,
    const VkDeviceGroupCommandBufferBeginInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceGroupSubmitInfo(
    const VkDeviceGroupSubmitInfo* a,
    const VkDeviceGroupSubmitInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceGroupBindSparseInfo(
    const VkDeviceGroupBindSparseInfo* a,
    const VkDeviceGroupBindSparseInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBindBufferMemoryDeviceGroupInfo(
    const VkBindBufferMemoryDeviceGroupInfo* a,
    const VkBindBufferMemoryDeviceGroupInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBindImageMemoryDeviceGroupInfo(
    const VkBindImageMemoryDeviceGroupInfo* a,
    const VkBindImageMemoryDeviceGroupInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceGroupProperties(
    const VkPhysicalDeviceGroupProperties* a,
    const VkPhysicalDeviceGroupProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceGroupDeviceCreateInfo(
    const VkDeviceGroupDeviceCreateInfo* a,
    const VkDeviceGroupDeviceCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBufferMemoryRequirementsInfo2(
    const VkBufferMemoryRequirementsInfo2* a,
    const VkBufferMemoryRequirementsInfo2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageMemoryRequirementsInfo2(
    const VkImageMemoryRequirementsInfo2* a,
    const VkImageMemoryRequirementsInfo2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageSparseMemoryRequirementsInfo2(
    const VkImageSparseMemoryRequirementsInfo2* a,
    const VkImageSparseMemoryRequirementsInfo2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryRequirements2(
    const VkMemoryRequirements2* a,
    const VkMemoryRequirements2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSparseImageMemoryRequirements2(
    const VkSparseImageMemoryRequirements2* a,
    const VkSparseImageMemoryRequirements2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceFeatures2(
    const VkPhysicalDeviceFeatures2* a,
    const VkPhysicalDeviceFeatures2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceProperties2(
    const VkPhysicalDeviceProperties2* a,
    const VkPhysicalDeviceProperties2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkFormatProperties2(
    const VkFormatProperties2* a,
    const VkFormatProperties2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageFormatProperties2(
    const VkImageFormatProperties2* a,
    const VkImageFormatProperties2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceImageFormatInfo2(
    const VkPhysicalDeviceImageFormatInfo2* a,
    const VkPhysicalDeviceImageFormatInfo2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkQueueFamilyProperties2(
    const VkQueueFamilyProperties2* a,
    const VkQueueFamilyProperties2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceMemoryProperties2(
    const VkPhysicalDeviceMemoryProperties2* a,
    const VkPhysicalDeviceMemoryProperties2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSparseImageFormatProperties2(
    const VkSparseImageFormatProperties2* a,
    const VkSparseImageFormatProperties2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceSparseImageFormatInfo2(
    const VkPhysicalDeviceSparseImageFormatInfo2* a,
    const VkPhysicalDeviceSparseImageFormatInfo2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDevicePointClippingProperties(
    const VkPhysicalDevicePointClippingProperties* a,
    const VkPhysicalDevicePointClippingProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkInputAttachmentAspectReference(
    const VkInputAttachmentAspectReference* a,
    const VkInputAttachmentAspectReference* b,
    OnFailCompareFunc onFail);

void checkEqual_VkRenderPassInputAttachmentAspectCreateInfo(
    const VkRenderPassInputAttachmentAspectCreateInfo* a,
    const VkRenderPassInputAttachmentAspectCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageViewUsageCreateInfo(
    const VkImageViewUsageCreateInfo* a,
    const VkImageViewUsageCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineTessellationDomainOriginStateCreateInfo(
    const VkPipelineTessellationDomainOriginStateCreateInfo* a,
    const VkPipelineTessellationDomainOriginStateCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkRenderPassMultiviewCreateInfo(
    const VkRenderPassMultiviewCreateInfo* a,
    const VkRenderPassMultiviewCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceMultiviewFeatures(
    const VkPhysicalDeviceMultiviewFeatures* a,
    const VkPhysicalDeviceMultiviewFeatures* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceMultiviewProperties(
    const VkPhysicalDeviceMultiviewProperties* a,
    const VkPhysicalDeviceMultiviewProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceVariablePointerFeatures(
    const VkPhysicalDeviceVariablePointerFeatures* a,
    const VkPhysicalDeviceVariablePointerFeatures* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceProtectedMemoryFeatures(
    const VkPhysicalDeviceProtectedMemoryFeatures* a,
    const VkPhysicalDeviceProtectedMemoryFeatures* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceProtectedMemoryProperties(
    const VkPhysicalDeviceProtectedMemoryProperties* a,
    const VkPhysicalDeviceProtectedMemoryProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceQueueInfo2(
    const VkDeviceQueueInfo2* a,
    const VkDeviceQueueInfo2* b,
    OnFailCompareFunc onFail);

void checkEqual_VkProtectedSubmitInfo(
    const VkProtectedSubmitInfo* a,
    const VkProtectedSubmitInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSamplerYcbcrConversionCreateInfo(
    const VkSamplerYcbcrConversionCreateInfo* a,
    const VkSamplerYcbcrConversionCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSamplerYcbcrConversionInfo(
    const VkSamplerYcbcrConversionInfo* a,
    const VkSamplerYcbcrConversionInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBindImagePlaneMemoryInfo(
    const VkBindImagePlaneMemoryInfo* a,
    const VkBindImagePlaneMemoryInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImagePlaneMemoryRequirementsInfo(
    const VkImagePlaneMemoryRequirementsInfo* a,
    const VkImagePlaneMemoryRequirementsInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    const VkPhysicalDeviceSamplerYcbcrConversionFeatures* a,
    const VkPhysicalDeviceSamplerYcbcrConversionFeatures* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSamplerYcbcrConversionImageFormatProperties(
    const VkSamplerYcbcrConversionImageFormatProperties* a,
    const VkSamplerYcbcrConversionImageFormatProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDescriptorUpdateTemplateEntry(
    const VkDescriptorUpdateTemplateEntry* a,
    const VkDescriptorUpdateTemplateEntry* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDescriptorUpdateTemplateCreateInfo(
    const VkDescriptorUpdateTemplateCreateInfo* a,
    const VkDescriptorUpdateTemplateCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExternalMemoryProperties(
    const VkExternalMemoryProperties* a,
    const VkExternalMemoryProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceExternalImageFormatInfo(
    const VkPhysicalDeviceExternalImageFormatInfo* a,
    const VkPhysicalDeviceExternalImageFormatInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExternalImageFormatProperties(
    const VkExternalImageFormatProperties* a,
    const VkExternalImageFormatProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceExternalBufferInfo(
    const VkPhysicalDeviceExternalBufferInfo* a,
    const VkPhysicalDeviceExternalBufferInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExternalBufferProperties(
    const VkExternalBufferProperties* a,
    const VkExternalBufferProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceIDProperties(
    const VkPhysicalDeviceIDProperties* a,
    const VkPhysicalDeviceIDProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExternalMemoryImageCreateInfo(
    const VkExternalMemoryImageCreateInfo* a,
    const VkExternalMemoryImageCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExternalMemoryBufferCreateInfo(
    const VkExternalMemoryBufferCreateInfo* a,
    const VkExternalMemoryBufferCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExportMemoryAllocateInfo(
    const VkExportMemoryAllocateInfo* a,
    const VkExportMemoryAllocateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceExternalFenceInfo(
    const VkPhysicalDeviceExternalFenceInfo* a,
    const VkPhysicalDeviceExternalFenceInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExternalFenceProperties(
    const VkExternalFenceProperties* a,
    const VkExternalFenceProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExportFenceCreateInfo(
    const VkExportFenceCreateInfo* a,
    const VkExportFenceCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExportSemaphoreCreateInfo(
    const VkExportSemaphoreCreateInfo* a,
    const VkExportSemaphoreCreateInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceExternalSemaphoreInfo(
    const VkPhysicalDeviceExternalSemaphoreInfo* a,
    const VkPhysicalDeviceExternalSemaphoreInfo* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExternalSemaphoreProperties(
    const VkExternalSemaphoreProperties* a,
    const VkExternalSemaphoreProperties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceMaintenance3Properties(
    const VkPhysicalDeviceMaintenance3Properties* a,
    const VkPhysicalDeviceMaintenance3Properties* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDescriptorSetLayoutSupport(
    const VkDescriptorSetLayoutSupport* a,
    const VkDescriptorSetLayoutSupport* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceShaderDrawParameterFeatures(
    const VkPhysicalDeviceShaderDrawParameterFeatures* a,
    const VkPhysicalDeviceShaderDrawParameterFeatures* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_surface
void checkEqual_VkSurfaceCapabilitiesKHR(
    const VkSurfaceCapabilitiesKHR* a,
    const VkSurfaceCapabilitiesKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSurfaceFormatKHR(
    const VkSurfaceFormatKHR* a,
    const VkSurfaceFormatKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_swapchain
void checkEqual_VkSwapchainCreateInfoKHR(
    const VkSwapchainCreateInfoKHR* a,
    const VkSwapchainCreateInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPresentInfoKHR(
    const VkPresentInfoKHR* a,
    const VkPresentInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImageSwapchainCreateInfoKHR(
    const VkImageSwapchainCreateInfoKHR* a,
    const VkImageSwapchainCreateInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkBindImageMemorySwapchainInfoKHR(
    const VkBindImageMemorySwapchainInfoKHR* a,
    const VkBindImageMemorySwapchainInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkAcquireNextImageInfoKHR(
    const VkAcquireNextImageInfoKHR* a,
    const VkAcquireNextImageInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceGroupPresentCapabilitiesKHR(
    const VkDeviceGroupPresentCapabilitiesKHR* a,
    const VkDeviceGroupPresentCapabilitiesKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceGroupPresentInfoKHR(
    const VkDeviceGroupPresentInfoKHR* a,
    const VkDeviceGroupPresentInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceGroupSwapchainCreateInfoKHR(
    const VkDeviceGroupSwapchainCreateInfoKHR* a,
    const VkDeviceGroupSwapchainCreateInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_display
void checkEqual_VkDisplayPropertiesKHR(
    const VkDisplayPropertiesKHR* a,
    const VkDisplayPropertiesKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDisplayModeParametersKHR(
    const VkDisplayModeParametersKHR* a,
    const VkDisplayModeParametersKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDisplayModePropertiesKHR(
    const VkDisplayModePropertiesKHR* a,
    const VkDisplayModePropertiesKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDisplayModeCreateInfoKHR(
    const VkDisplayModeCreateInfoKHR* a,
    const VkDisplayModeCreateInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDisplayPlaneCapabilitiesKHR(
    const VkDisplayPlaneCapabilitiesKHR* a,
    const VkDisplayPlaneCapabilitiesKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDisplayPlanePropertiesKHR(
    const VkDisplayPlanePropertiesKHR* a,
    const VkDisplayPlanePropertiesKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDisplaySurfaceCreateInfoKHR(
    const VkDisplaySurfaceCreateInfoKHR* a,
    const VkDisplaySurfaceCreateInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_display_swapchain
void checkEqual_VkDisplayPresentInfoKHR(
    const VkDisplayPresentInfoKHR* a,
    const VkDisplayPresentInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_xlib_surface
void checkEqual_VkXlibSurfaceCreateInfoKHR(
    const VkXlibSurfaceCreateInfoKHR* a,
    const VkXlibSurfaceCreateInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_xcb_surface
void checkEqual_VkXcbSurfaceCreateInfoKHR(
    const VkXcbSurfaceCreateInfoKHR* a,
    const VkXcbSurfaceCreateInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_wayland_surface
void checkEqual_VkWaylandSurfaceCreateInfoKHR(
    const VkWaylandSurfaceCreateInfoKHR* a,
    const VkWaylandSurfaceCreateInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_mir_surface
void checkEqual_VkMirSurfaceCreateInfoKHR(
    const VkMirSurfaceCreateInfoKHR* a,
    const VkMirSurfaceCreateInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_android_surface
void checkEqual_VkAndroidSurfaceCreateInfoKHR(
    const VkAndroidSurfaceCreateInfoKHR* a,
    const VkAndroidSurfaceCreateInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_win32_surface
void checkEqual_VkWin32SurfaceCreateInfoKHR(
    const VkWin32SurfaceCreateInfoKHR* a,
    const VkWin32SurfaceCreateInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_sampler_mirror_clamp_to_edge
#endif
#ifdef VK_KHR_multiview
#endif
#ifdef VK_KHR_get_physical_device_properties2
#endif
#ifdef VK_KHR_device_group
#endif
#ifdef VK_KHR_shader_draw_parameters
#endif
#ifdef VK_KHR_maintenance1
#endif
#ifdef VK_KHR_device_group_creation
#endif
#ifdef VK_KHR_external_memory_capabilities
#endif
#ifdef VK_KHR_external_memory
#endif
#ifdef VK_KHR_external_memory_win32
void checkEqual_VkImportMemoryWin32HandleInfoKHR(
    const VkImportMemoryWin32HandleInfoKHR* a,
    const VkImportMemoryWin32HandleInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExportMemoryWin32HandleInfoKHR(
    const VkExportMemoryWin32HandleInfoKHR* a,
    const VkExportMemoryWin32HandleInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryWin32HandlePropertiesKHR(
    const VkMemoryWin32HandlePropertiesKHR* a,
    const VkMemoryWin32HandlePropertiesKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryGetWin32HandleInfoKHR(
    const VkMemoryGetWin32HandleInfoKHR* a,
    const VkMemoryGetWin32HandleInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_external_memory_fd
void checkEqual_VkImportMemoryFdInfoKHR(
    const VkImportMemoryFdInfoKHR* a,
    const VkImportMemoryFdInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryFdPropertiesKHR(
    const VkMemoryFdPropertiesKHR* a,
    const VkMemoryFdPropertiesKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryGetFdInfoKHR(
    const VkMemoryGetFdInfoKHR* a,
    const VkMemoryGetFdInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_win32_keyed_mutex
void checkEqual_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    const VkWin32KeyedMutexAcquireReleaseInfoKHR* a,
    const VkWin32KeyedMutexAcquireReleaseInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_external_semaphore_capabilities
#endif
#ifdef VK_KHR_external_semaphore
#endif
#ifdef VK_KHR_external_semaphore_win32
void checkEqual_VkImportSemaphoreWin32HandleInfoKHR(
    const VkImportSemaphoreWin32HandleInfoKHR* a,
    const VkImportSemaphoreWin32HandleInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExportSemaphoreWin32HandleInfoKHR(
    const VkExportSemaphoreWin32HandleInfoKHR* a,
    const VkExportSemaphoreWin32HandleInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkD3D12FenceSubmitInfoKHR(
    const VkD3D12FenceSubmitInfoKHR* a,
    const VkD3D12FenceSubmitInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSemaphoreGetWin32HandleInfoKHR(
    const VkSemaphoreGetWin32HandleInfoKHR* a,
    const VkSemaphoreGetWin32HandleInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_external_semaphore_fd
void checkEqual_VkImportSemaphoreFdInfoKHR(
    const VkImportSemaphoreFdInfoKHR* a,
    const VkImportSemaphoreFdInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSemaphoreGetFdInfoKHR(
    const VkSemaphoreGetFdInfoKHR* a,
    const VkSemaphoreGetFdInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_push_descriptor
void checkEqual_VkPhysicalDevicePushDescriptorPropertiesKHR(
    const VkPhysicalDevicePushDescriptorPropertiesKHR* a,
    const VkPhysicalDevicePushDescriptorPropertiesKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_16bit_storage
#endif
#ifdef VK_KHR_incremental_present
void checkEqual_VkRectLayerKHR(
    const VkRectLayerKHR* a,
    const VkRectLayerKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPresentRegionKHR(
    const VkPresentRegionKHR* a,
    const VkPresentRegionKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPresentRegionsKHR(
    const VkPresentRegionsKHR* a,
    const VkPresentRegionsKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_descriptor_update_template
#endif
#ifdef VK_KHR_create_renderpass2
void checkEqual_VkAttachmentDescription2KHR(
    const VkAttachmentDescription2KHR* a,
    const VkAttachmentDescription2KHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkAttachmentReference2KHR(
    const VkAttachmentReference2KHR* a,
    const VkAttachmentReference2KHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSubpassDescription2KHR(
    const VkSubpassDescription2KHR* a,
    const VkSubpassDescription2KHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSubpassDependency2KHR(
    const VkSubpassDependency2KHR* a,
    const VkSubpassDependency2KHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkRenderPassCreateInfo2KHR(
    const VkRenderPassCreateInfo2KHR* a,
    const VkRenderPassCreateInfo2KHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSubpassBeginInfoKHR(
    const VkSubpassBeginInfoKHR* a,
    const VkSubpassBeginInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSubpassEndInfoKHR(
    const VkSubpassEndInfoKHR* a,
    const VkSubpassEndInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_shared_presentable_image
void checkEqual_VkSharedPresentSurfaceCapabilitiesKHR(
    const VkSharedPresentSurfaceCapabilitiesKHR* a,
    const VkSharedPresentSurfaceCapabilitiesKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_external_fence_capabilities
#endif
#ifdef VK_KHR_external_fence
#endif
#ifdef VK_KHR_external_fence_win32
void checkEqual_VkImportFenceWin32HandleInfoKHR(
    const VkImportFenceWin32HandleInfoKHR* a,
    const VkImportFenceWin32HandleInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExportFenceWin32HandleInfoKHR(
    const VkExportFenceWin32HandleInfoKHR* a,
    const VkExportFenceWin32HandleInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkFenceGetWin32HandleInfoKHR(
    const VkFenceGetWin32HandleInfoKHR* a,
    const VkFenceGetWin32HandleInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_external_fence_fd
void checkEqual_VkImportFenceFdInfoKHR(
    const VkImportFenceFdInfoKHR* a,
    const VkImportFenceFdInfoKHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkFenceGetFdInfoKHR(
    const VkFenceGetFdInfoKHR* a,
    const VkFenceGetFdInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_maintenance2
#endif
#ifdef VK_KHR_get_surface_capabilities2
void checkEqual_VkPhysicalDeviceSurfaceInfo2KHR(
    const VkPhysicalDeviceSurfaceInfo2KHR* a,
    const VkPhysicalDeviceSurfaceInfo2KHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSurfaceCapabilities2KHR(
    const VkSurfaceCapabilities2KHR* a,
    const VkSurfaceCapabilities2KHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSurfaceFormat2KHR(
    const VkSurfaceFormat2KHR* a,
    const VkSurfaceFormat2KHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_variable_pointers
#endif
#ifdef VK_KHR_get_display_properties2
void checkEqual_VkDisplayProperties2KHR(
    const VkDisplayProperties2KHR* a,
    const VkDisplayProperties2KHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDisplayPlaneProperties2KHR(
    const VkDisplayPlaneProperties2KHR* a,
    const VkDisplayPlaneProperties2KHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDisplayModeProperties2KHR(
    const VkDisplayModeProperties2KHR* a,
    const VkDisplayModeProperties2KHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDisplayPlaneInfo2KHR(
    const VkDisplayPlaneInfo2KHR* a,
    const VkDisplayPlaneInfo2KHR* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDisplayPlaneCapabilities2KHR(
    const VkDisplayPlaneCapabilities2KHR* a,
    const VkDisplayPlaneCapabilities2KHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_dedicated_allocation
#endif
#ifdef VK_KHR_storage_buffer_storage_class
#endif
#ifdef VK_KHR_relaxed_block_layout
#endif
#ifdef VK_KHR_get_memory_requirements2
#endif
#ifdef VK_KHR_image_format_list
void checkEqual_VkImageFormatListCreateInfoKHR(
    const VkImageFormatListCreateInfoKHR* a,
    const VkImageFormatListCreateInfoKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
#endif
#ifdef VK_KHR_bind_memory2
#endif
#ifdef VK_KHR_maintenance3
#endif
#ifdef VK_KHR_draw_indirect_count
#endif
#ifdef VK_KHR_8bit_storage
void checkEqual_VkPhysicalDevice8BitStorageFeaturesKHR(
    const VkPhysicalDevice8BitStorageFeaturesKHR* a,
    const VkPhysicalDevice8BitStorageFeaturesKHR* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_KHR_shader_float16_int8
void checkEqual_VkPhysicalDeviceShaderFloat16Int8Features(
    const VkPhysicalDeviceShaderFloat16Int8Features* a,
    const VkPhysicalDeviceShaderFloat16Int8Features* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_ANDROID_native_buffer
void checkEqual_VkNativeBufferANDROID(
    const VkNativeBufferANDROID* a,
    const VkNativeBufferANDROID* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_debug_report
void checkEqual_VkDebugReportCallbackCreateInfoEXT(
    const VkDebugReportCallbackCreateInfoEXT* a,
    const VkDebugReportCallbackCreateInfoEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NV_glsl_shader
#endif
#ifdef VK_EXT_depth_range_unrestricted
#endif
#ifdef VK_IMG_filter_cubic
#endif
#ifdef VK_AMD_rasterization_order
void checkEqual_VkPipelineRasterizationStateRasterizationOrderAMD(
    const VkPipelineRasterizationStateRasterizationOrderAMD* a,
    const VkPipelineRasterizationStateRasterizationOrderAMD* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_AMD_shader_trinary_minmax
#endif
#ifdef VK_AMD_shader_explicit_vertex_parameter
#endif
#ifdef VK_EXT_debug_marker
void checkEqual_VkDebugMarkerObjectNameInfoEXT(
    const VkDebugMarkerObjectNameInfoEXT* a,
    const VkDebugMarkerObjectNameInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDebugMarkerObjectTagInfoEXT(
    const VkDebugMarkerObjectTagInfoEXT* a,
    const VkDebugMarkerObjectTagInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDebugMarkerMarkerInfoEXT(
    const VkDebugMarkerMarkerInfoEXT* a,
    const VkDebugMarkerMarkerInfoEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_AMD_gcn_shader
#endif
#ifdef VK_NV_dedicated_allocation
void checkEqual_VkDedicatedAllocationImageCreateInfoNV(
    const VkDedicatedAllocationImageCreateInfoNV* a,
    const VkDedicatedAllocationImageCreateInfoNV* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDedicatedAllocationBufferCreateInfoNV(
    const VkDedicatedAllocationBufferCreateInfoNV* a,
    const VkDedicatedAllocationBufferCreateInfoNV* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDedicatedAllocationMemoryAllocateInfoNV(
    const VkDedicatedAllocationMemoryAllocateInfoNV* a,
    const VkDedicatedAllocationMemoryAllocateInfoNV* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_AMD_draw_indirect_count
#endif
#ifdef VK_AMD_negative_viewport_height
#endif
#ifdef VK_AMD_gpu_shader_half_float
#endif
#ifdef VK_AMD_shader_ballot
#endif
#ifdef VK_AMD_texture_gather_bias_lod
void checkEqual_VkTextureLODGatherFormatPropertiesAMD(
    const VkTextureLODGatherFormatPropertiesAMD* a,
    const VkTextureLODGatherFormatPropertiesAMD* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_AMD_shader_info
void checkEqual_VkShaderResourceUsageAMD(
    const VkShaderResourceUsageAMD* a,
    const VkShaderResourceUsageAMD* b,
    OnFailCompareFunc onFail);

void checkEqual_VkShaderStatisticsInfoAMD(
    const VkShaderStatisticsInfoAMD* a,
    const VkShaderStatisticsInfoAMD* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_AMD_shader_image_load_store_lod
#endif
#ifdef VK_IMG_format_pvrtc
#endif
#ifdef VK_NV_external_memory_capabilities
void checkEqual_VkExternalImageFormatPropertiesNV(
    const VkExternalImageFormatPropertiesNV* a,
    const VkExternalImageFormatPropertiesNV* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NV_external_memory
void checkEqual_VkExternalMemoryImageCreateInfoNV(
    const VkExternalMemoryImageCreateInfoNV* a,
    const VkExternalMemoryImageCreateInfoNV* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExportMemoryAllocateInfoNV(
    const VkExportMemoryAllocateInfoNV* a,
    const VkExportMemoryAllocateInfoNV* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NV_external_memory_win32
void checkEqual_VkImportMemoryWin32HandleInfoNV(
    const VkImportMemoryWin32HandleInfoNV* a,
    const VkImportMemoryWin32HandleInfoNV* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExportMemoryWin32HandleInfoNV(
    const VkExportMemoryWin32HandleInfoNV* a,
    const VkExportMemoryWin32HandleInfoNV* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NV_win32_keyed_mutex
void checkEqual_VkWin32KeyedMutexAcquireReleaseInfoNV(
    const VkWin32KeyedMutexAcquireReleaseInfoNV* a,
    const VkWin32KeyedMutexAcquireReleaseInfoNV* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_validation_flags
void checkEqual_VkValidationFlagsEXT(
    const VkValidationFlagsEXT* a,
    const VkValidationFlagsEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NN_vi_surface
void checkEqual_VkViSurfaceCreateInfoNN(
    const VkViSurfaceCreateInfoNN* a,
    const VkViSurfaceCreateInfoNN* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_shader_subgroup_ballot
#endif
#ifdef VK_EXT_shader_subgroup_vote
#endif
#ifdef VK_EXT_conditional_rendering
void checkEqual_VkConditionalRenderingBeginInfoEXT(
    const VkConditionalRenderingBeginInfoEXT* a,
    const VkConditionalRenderingBeginInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    const VkPhysicalDeviceConditionalRenderingFeaturesEXT* a,
    const VkPhysicalDeviceConditionalRenderingFeaturesEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    const VkCommandBufferInheritanceConditionalRenderingInfoEXT* a,
    const VkCommandBufferInheritanceConditionalRenderingInfoEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NVX_device_generated_commands
void checkEqual_VkDeviceGeneratedCommandsFeaturesNVX(
    const VkDeviceGeneratedCommandsFeaturesNVX* a,
    const VkDeviceGeneratedCommandsFeaturesNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceGeneratedCommandsLimitsNVX(
    const VkDeviceGeneratedCommandsLimitsNVX* a,
    const VkDeviceGeneratedCommandsLimitsNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkIndirectCommandsTokenNVX(
    const VkIndirectCommandsTokenNVX* a,
    const VkIndirectCommandsTokenNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkIndirectCommandsLayoutTokenNVX(
    const VkIndirectCommandsLayoutTokenNVX* a,
    const VkIndirectCommandsLayoutTokenNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkIndirectCommandsLayoutCreateInfoNVX(
    const VkIndirectCommandsLayoutCreateInfoNVX* a,
    const VkIndirectCommandsLayoutCreateInfoNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkCmdProcessCommandsInfoNVX(
    const VkCmdProcessCommandsInfoNVX* a,
    const VkCmdProcessCommandsInfoNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkCmdReserveSpaceForCommandsInfoNVX(
    const VkCmdReserveSpaceForCommandsInfoNVX* a,
    const VkCmdReserveSpaceForCommandsInfoNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkObjectTableCreateInfoNVX(
    const VkObjectTableCreateInfoNVX* a,
    const VkObjectTableCreateInfoNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkObjectTableEntryNVX(
    const VkObjectTableEntryNVX* a,
    const VkObjectTableEntryNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkObjectTablePipelineEntryNVX(
    const VkObjectTablePipelineEntryNVX* a,
    const VkObjectTablePipelineEntryNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkObjectTableDescriptorSetEntryNVX(
    const VkObjectTableDescriptorSetEntryNVX* a,
    const VkObjectTableDescriptorSetEntryNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkObjectTableVertexBufferEntryNVX(
    const VkObjectTableVertexBufferEntryNVX* a,
    const VkObjectTableVertexBufferEntryNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkObjectTableIndexBufferEntryNVX(
    const VkObjectTableIndexBufferEntryNVX* a,
    const VkObjectTableIndexBufferEntryNVX* b,
    OnFailCompareFunc onFail);

void checkEqual_VkObjectTablePushConstantEntryNVX(
    const VkObjectTablePushConstantEntryNVX* a,
    const VkObjectTablePushConstantEntryNVX* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NV_clip_space_w_scaling
void checkEqual_VkViewportWScalingNV(
    const VkViewportWScalingNV* a,
    const VkViewportWScalingNV* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineViewportWScalingStateCreateInfoNV(
    const VkPipelineViewportWScalingStateCreateInfoNV* a,
    const VkPipelineViewportWScalingStateCreateInfoNV* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_direct_mode_display
#endif
#ifdef VK_EXT_acquire_xlib_display
#endif
#ifdef VK_EXT_display_surface_counter
void checkEqual_VkSurfaceCapabilities2EXT(
    const VkSurfaceCapabilities2EXT* a,
    const VkSurfaceCapabilities2EXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_display_control
void checkEqual_VkDisplayPowerInfoEXT(
    const VkDisplayPowerInfoEXT* a,
    const VkDisplayPowerInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDeviceEventInfoEXT(
    const VkDeviceEventInfoEXT* a,
    const VkDeviceEventInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDisplayEventInfoEXT(
    const VkDisplayEventInfoEXT* a,
    const VkDisplayEventInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSwapchainCounterCreateInfoEXT(
    const VkSwapchainCounterCreateInfoEXT* a,
    const VkSwapchainCounterCreateInfoEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_GOOGLE_display_timing
void checkEqual_VkRefreshCycleDurationGOOGLE(
    const VkRefreshCycleDurationGOOGLE* a,
    const VkRefreshCycleDurationGOOGLE* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPastPresentationTimingGOOGLE(
    const VkPastPresentationTimingGOOGLE* a,
    const VkPastPresentationTimingGOOGLE* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPresentTimeGOOGLE(
    const VkPresentTimeGOOGLE* a,
    const VkPresentTimeGOOGLE* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPresentTimesInfoGOOGLE(
    const VkPresentTimesInfoGOOGLE* a,
    const VkPresentTimesInfoGOOGLE* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NV_sample_mask_override_coverage
#endif
#ifdef VK_NV_geometry_shader_passthrough
#endif
#ifdef VK_NV_viewport_array2
#endif
#ifdef VK_NVX_multiview_per_view_attributes
void checkEqual_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* a,
    const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NV_viewport_swizzle
void checkEqual_VkViewportSwizzleNV(
    const VkViewportSwizzleNV* a,
    const VkViewportSwizzleNV* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineViewportSwizzleStateCreateInfoNV(
    const VkPipelineViewportSwizzleStateCreateInfoNV* a,
    const VkPipelineViewportSwizzleStateCreateInfoNV* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_discard_rectangles
void checkEqual_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    const VkPhysicalDeviceDiscardRectanglePropertiesEXT* a,
    const VkPhysicalDeviceDiscardRectanglePropertiesEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineDiscardRectangleStateCreateInfoEXT(
    const VkPipelineDiscardRectangleStateCreateInfoEXT* a,
    const VkPipelineDiscardRectangleStateCreateInfoEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_conservative_rasterization
void checkEqual_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    const VkPhysicalDeviceConservativeRasterizationPropertiesEXT* a,
    const VkPhysicalDeviceConservativeRasterizationPropertiesEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    const VkPipelineRasterizationConservativeStateCreateInfoEXT* a,
    const VkPipelineRasterizationConservativeStateCreateInfoEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_swapchain_colorspace
#endif
#ifdef VK_EXT_hdr_metadata
void checkEqual_VkXYColorEXT(
    const VkXYColorEXT* a,
    const VkXYColorEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkHdrMetadataEXT(
    const VkHdrMetadataEXT* a,
    const VkHdrMetadataEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_MVK_ios_surface
void checkEqual_VkIOSSurfaceCreateInfoMVK(
    const VkIOSSurfaceCreateInfoMVK* a,
    const VkIOSSurfaceCreateInfoMVK* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_MVK_macos_surface
void checkEqual_VkMacOSSurfaceCreateInfoMVK(
    const VkMacOSSurfaceCreateInfoMVK* a,
    const VkMacOSSurfaceCreateInfoMVK* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_external_memory_dma_buf
#endif
#ifdef VK_EXT_queue_family_foreign
#endif
#ifdef VK_EXT_debug_utils
void checkEqual_VkDebugUtilsObjectNameInfoEXT(
    const VkDebugUtilsObjectNameInfoEXT* a,
    const VkDebugUtilsObjectNameInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDebugUtilsObjectTagInfoEXT(
    const VkDebugUtilsObjectTagInfoEXT* a,
    const VkDebugUtilsObjectTagInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDebugUtilsLabelEXT(
    const VkDebugUtilsLabelEXT* a,
    const VkDebugUtilsLabelEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDebugUtilsMessengerCallbackDataEXT(
    const VkDebugUtilsMessengerCallbackDataEXT* a,
    const VkDebugUtilsMessengerCallbackDataEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDebugUtilsMessengerCreateInfoEXT(
    const VkDebugUtilsMessengerCreateInfoEXT* a,
    const VkDebugUtilsMessengerCreateInfoEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
void checkEqual_VkAndroidHardwareBufferUsageANDROID(
    const VkAndroidHardwareBufferUsageANDROID* a,
    const VkAndroidHardwareBufferUsageANDROID* b,
    OnFailCompareFunc onFail);

void checkEqual_VkAndroidHardwareBufferPropertiesANDROID(
    const VkAndroidHardwareBufferPropertiesANDROID* a,
    const VkAndroidHardwareBufferPropertiesANDROID* b,
    OnFailCompareFunc onFail);

void checkEqual_VkAndroidHardwareBufferFormatPropertiesANDROID(
    const VkAndroidHardwareBufferFormatPropertiesANDROID* a,
    const VkAndroidHardwareBufferFormatPropertiesANDROID* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImportAndroidHardwareBufferInfoANDROID(
    const VkImportAndroidHardwareBufferInfoANDROID* a,
    const VkImportAndroidHardwareBufferInfoANDROID* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* a,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* b,
    OnFailCompareFunc onFail);

void checkEqual_VkExternalFormatANDROID(
    const VkExternalFormatANDROID* a,
    const VkExternalFormatANDROID* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_sampler_filter_minmax
void checkEqual_VkSamplerReductionModeCreateInfoEXT(
    const VkSamplerReductionModeCreateInfoEXT* a,
    const VkSamplerReductionModeCreateInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* a,
    const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_AMD_gpu_shader_int16
#endif
#ifdef VK_AMD_mixed_attachment_samples
#endif
#ifdef VK_AMD_shader_fragment_mask
#endif
#ifdef VK_EXT_shader_stencil_export
#endif
#ifdef VK_EXT_sample_locations
void checkEqual_VkSampleLocationEXT(
    const VkSampleLocationEXT* a,
    const VkSampleLocationEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSampleLocationsInfoEXT(
    const VkSampleLocationsInfoEXT* a,
    const VkSampleLocationsInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkAttachmentSampleLocationsEXT(
    const VkAttachmentSampleLocationsEXT* a,
    const VkAttachmentSampleLocationsEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkSubpassSampleLocationsEXT(
    const VkSubpassSampleLocationsEXT* a,
    const VkSubpassSampleLocationsEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkRenderPassSampleLocationsBeginInfoEXT(
    const VkRenderPassSampleLocationsBeginInfoEXT* a,
    const VkRenderPassSampleLocationsBeginInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineSampleLocationsStateCreateInfoEXT(
    const VkPipelineSampleLocationsStateCreateInfoEXT* a,
    const VkPipelineSampleLocationsStateCreateInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    const VkPhysicalDeviceSampleLocationsPropertiesEXT* a,
    const VkPhysicalDeviceSampleLocationsPropertiesEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMultisamplePropertiesEXT(
    const VkMultisamplePropertiesEXT* a,
    const VkMultisamplePropertiesEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_blend_operation_advanced
void checkEqual_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* a,
    const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* a,
    const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    const VkPipelineColorBlendAdvancedStateCreateInfoEXT* a,
    const VkPipelineColorBlendAdvancedStateCreateInfoEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NV_fragment_coverage_to_color
void checkEqual_VkPipelineCoverageToColorStateCreateInfoNV(
    const VkPipelineCoverageToColorStateCreateInfoNV* a,
    const VkPipelineCoverageToColorStateCreateInfoNV* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NV_framebuffer_mixed_samples
void checkEqual_VkPipelineCoverageModulationStateCreateInfoNV(
    const VkPipelineCoverageModulationStateCreateInfoNV* a,
    const VkPipelineCoverageModulationStateCreateInfoNV* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NV_fill_rectangle
#endif
#ifdef VK_EXT_post_depth_coverage
#endif
#ifdef VK_EXT_validation_cache
void checkEqual_VkValidationCacheCreateInfoEXT(
    const VkValidationCacheCreateInfoEXT* a,
    const VkValidationCacheCreateInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkShaderModuleValidationCacheCreateInfoEXT(
    const VkShaderModuleValidationCacheCreateInfoEXT* a,
    const VkShaderModuleValidationCacheCreateInfoEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_descriptor_indexing
void checkEqual_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* a,
    const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    const VkPhysicalDeviceDescriptorIndexingFeaturesEXT* a,
    const VkPhysicalDeviceDescriptorIndexingFeaturesEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    const VkPhysicalDeviceDescriptorIndexingPropertiesEXT* a,
    const VkPhysicalDeviceDescriptorIndexingPropertiesEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* a,
    const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* a,
    const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_shader_viewport_index_layer
#endif
#ifdef VK_EXT_global_priority
void checkEqual_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    const VkDeviceQueueGlobalPriorityCreateInfoEXT* a,
    const VkDeviceQueueGlobalPriorityCreateInfoEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_external_memory_host
void checkEqual_VkImportMemoryHostPointerInfoEXT(
    const VkImportMemoryHostPointerInfoEXT* a,
    const VkImportMemoryHostPointerInfoEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkMemoryHostPointerPropertiesEXT(
    const VkMemoryHostPointerPropertiesEXT* a,
    const VkMemoryHostPointerPropertiesEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    const VkPhysicalDeviceExternalMemoryHostPropertiesEXT* a,
    const VkPhysicalDeviceExternalMemoryHostPropertiesEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_AMD_buffer_marker
#endif
#ifdef VK_AMD_shader_core_properties
void checkEqual_VkPhysicalDeviceShaderCorePropertiesAMD(
    const VkPhysicalDeviceShaderCorePropertiesAMD* a,
    const VkPhysicalDeviceShaderCorePropertiesAMD* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_EXT_vertex_attribute_divisor
void checkEqual_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* a,
    const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkVertexInputBindingDivisorDescriptionEXT(
    const VkVertexInputBindingDivisorDescriptionEXT* a,
    const VkVertexInputBindingDivisorDescriptionEXT* b,
    OnFailCompareFunc onFail);

void checkEqual_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    const VkPipelineVertexInputDivisorStateCreateInfoEXT* a,
    const VkPipelineVertexInputDivisorStateCreateInfoEXT* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_NV_shader_subgroup_partitioned
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
void checkEqual_VkQueueFamilyCheckpointPropertiesNV(
    const VkQueueFamilyCheckpointPropertiesNV* a,
    const VkQueueFamilyCheckpointPropertiesNV* b,
    OnFailCompareFunc onFail);

void checkEqual_VkCheckpointDataNV(
    const VkCheckpointDataNV* a,
    const VkCheckpointDataNV* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_GOOGLE_address_space
#endif
#ifdef VK_GOOGLE_color_buffer
void checkEqual_VkImportColorBufferGOOGLE(
    const VkImportColorBufferGOOGLE* a,
    const VkImportColorBufferGOOGLE* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImportBufferGOOGLE(
    const VkImportBufferGOOGLE* a,
    const VkImportBufferGOOGLE* b,
    OnFailCompareFunc onFail);

void checkEqual_VkImportPhysicalAddressGOOGLE(
    const VkImportPhysicalAddressGOOGLE* a,
    const VkImportPhysicalAddressGOOGLE* b,
    OnFailCompareFunc onFail);

#endif
#ifdef VK_GOOGLE_sized_descriptor_update_template
#endif
#ifdef VK_GOOGLE_async_command_buffers
#endif
#ifdef VK_GOOGLE_create_resources_with_requirements
#endif
#ifdef VK_GOOGLE_address_space_info
#endif
#ifdef VK_GOOGLE_free_memory_sync
#endif
#ifdef VK_GOOGLE_async_queue_submit
#endif
#ifdef VK_GOOGLE_linear_image_layout
#endif

} // namespace goldfish_vk
